{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/index.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/learning/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","push","toUpper","val","hasVal","literalToSQL","literal","parentheses","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","symbol","arrayStructTypeToSQL","dataType","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","kw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","length","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","orderby","fnName","overStr","overToSQL","distinct","orderOrPartitionByToSQL","window_func","windowFuncToSQL","assign","leftVar","rightVal","extract","extractFunToSQL","binary_expr","rstr","isBetween","case","res","conditions","len","cond","cast","castToSQL","column_ref","function","funcToSQL","interval","intervalExpr","unit","show","showToSQL","struct","namedWindowExprListToSQL","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","members","varName","select","_next","unionToSQL","selectToSQL","unary_expr","tableToSQL","tableInfo","table","db","as","tableName","tablesToSQL","tables","unnestExpr","withOffset","with_offset","unnestToSQL","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","sql","arrow","column","columnDataType","scale","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","getDual","star","columnsStr","columnToSQL","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","offset","seperator","limitOffsetToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","index","target","expression","alias","symbolChar","castType","cast_type","source","setToSQL","sets","set","setItem","valuesToSQL","values","partitionToSQL","partitionArr","commonCmdToSQL","options","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","typeToSQLFn","alterToSQL","createToSQL","delete","from","where","columnInfo","addition","update","insert","onDuplicateUpdate","on_duplicate_update","duplicateSet","drop","truncate","declare","dec","at","declareInfo","createDefinitionToSQL","use","rename","renameInfo","storeProcessCall","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","withExpr","withToSQL","multipleToSQL","astInfo","resource","like","temporary","ifNotExists","if_not_exists","createDefinition","create_definitions","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","schema","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","asWindowSpec","as_window_specification","partitionby","windowSQL","asWindowSpecToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","groupby","having","parentheses_symbol","top","windowInfo","withInfo","windowSpec","window_specification","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","constructArgsList","constraintDefinition","constraintSQL","isRecursive","recursive","withExprStr","cte","showExpr","showEventExpr","inClause","showCharacterSetExpr","op","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","surportedTypes","checkSupported","includes","toSQL","Parser","this","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","test","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","replace","j","descriptions","sort","slice","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c40","peg$c45","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c66","peg$c68","peg$c70","peg$c72","peg$c74","peg$c77","peg$c79","peg$c94","createBinaryExprChain","peg$c96","peg$c98","peg$c102","nk","peg$c105","peg$c107","peg$c109","peg$c111","peg$c113","peg$c115","peg$c123","peg$c125","peg$c128","peg$c130","peg$c132","peg$c138","reservedMap","peg$c142","peg$c143","peg$c144","peg$classExpectation","peg$c145","chars","peg$c147","peg$c148","peg$c149","peg$c151","peg$c152","peg$c153","peg$c156","peg$c157","peg$c158","peg$c159","peg$c160","peg$c161","peg$c162","peg$c164","peg$c173","bc","peg$c176","peg$c178","peg$c180","peg$c182","peg$c184","peg$c186","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c228","peg$c229","ca","peg$c233","peg$c235","peg$c236","peg$c237","peg$c238","peg$c240","peg$c243","peg$c246","peg$c249","peg$c252","peg$c255","peg$c258","peg$c261","peg$c264","peg$c267","peg$c270","peg$c271","peg$c272","peg$c281","peg$c285","peg$c286","peg$c287","peg$c288","peg$c289","peg$c290","peg$c291","peg$c292","peg$c295","peg$c301","peg$c305","peg$c312","peg$c322","peg$c327","peg$c344","peg$c346","peg$c348","peg$c350","peg$c352","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c364","peg$c369","peg$c371","peg$c373","peg$c375","peg$c377","peg$c379","peg$c381","peg$c383","peg$c385","peg$c387","peg$c390","peg$c393","peg$c396","peg$c399","peg$c402","peg$c405","peg$c408","peg$c411","peg$c414","peg$c417","peg$c420","peg$c423","peg$c426","peg$c429","peg$c432","peg$c435","peg$c438","peg$c441","peg$c457","peg$c459","peg$c462","peg$c465","peg$c471","peg$c477","peg$c480","peg$c483","peg$c486","peg$c489","peg$c495","peg$c504","peg$c507","peg$c528","peg$c534","peg$c537","peg$c540","peg$c543","peg$c552","peg$c558","peg$c567","peg$c570","peg$c615","peg$c617","peg$c619","peg$c621","peg$c623","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c634","peg$c635","peg$c636","peg$c640","peg$c641","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","substr","peg$parseident_start","peg$parseKW_LIMIT","peg$parsenumber_or_param","peg$parseKW_OFFSET","i1","peg$c83","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","peg$c15","s11","s13","s15","s17","s19","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","peg$parsewith_offset","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseparentheses_or_expr","peg$parseKW_AND","peg$parseKW_OR","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","peg$c19","peg$parseselect_stmt_nake","peg$parseident_name","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","tbl","pro","peg$parseident","peg$parseDOT","peg$parseLBRAKE","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parsecolumn_offset_expr","peg$parseexpr_alias","peg$c140","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","peg$parseon_clause","peg$c48","peg$c49","peg$parsetable_join","peg$parsetable_name","peg$c51","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","peg$parseKW_CROSS","project","dt","obj","peg$c56","peg$c57","peg$parseKW_ON","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","e","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c82","peg$parseparam","el","peg$c84","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseor_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","peg$c86","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c87","peg$parsearray_expr","rt","lf","peg$c92","peg$parseand_expr","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","peg$parseliteral_string","peg$c121","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c117","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","peg$parsedata_type","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c220","peg$c221","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c222","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$c174","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c218","peg$parseextract_func","peg$parsefunc_call","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c137","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parsesingle_char","peg$c231","up","peg$c234","peg$parseliteral_datetime","peg$parsesingle_quote_char","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c275","exp","peg$c276","peg$c277","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c639","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parseKW_DATETIME","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","split","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","or","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","digit","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, value } = opt\n  result.push(type.toUpperCase())\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'time':\n    case 'date':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  extract     : extractFunToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(expr) {\n  const str = `${expr.operator} ${exprToSQL(expr.expr)}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) str = `DISTINCT ${str}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  return [`${fnName}(${str})`, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\nimport { exprToSQL } from './expr'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr } = tableInfo\n  const database = identifierToSql(db)\n  const tableName = table ? identifierToSql(table) : exprToSQL(expr)\n  const str = database ? `${database}.${tableName}` : tableName\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, table, parentheses, property,\n  } = expr\n  let str = column === '*' ? '*' : identifierToSql(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale } = definition || {}\n  let result = dataType\n  if (length) {\n    result += `(${[length, scale].filter(hasVal).join(', ')})`\n  }\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (column.as.match(/^[a-z_][0-9a-z_]*$/i)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { target, expr: expression, symbol, as: alias } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  if (!args) return name\n  const { parentheses, over } = expr\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  const overStr = overToSQL(over)\n  return [parentheses ? `(${str})` : str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL, toUpper } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value, keyword } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    if (keyword) setItem[2] = `${toUpper(keyword)}(${val})`\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = ['INSERT', toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  commonCmdToSQL,\n  declareToSQL,\n  renameToSQL,\n  useToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { createToSQL } from './create'\nimport { alterToSQL } from './alter'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  commonCmdToSQL,\n  declareToSQL,\n  useToSQL,\n  renameToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns,\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { columnDefinitionToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  const {\n    action, create_definitions: createDefinition, if_not_exists: ifNotExists,keyword, resource, symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    default:\n      break\n  }\n  const alterArray = [toUpper(action), toUpper(keyword), toUpper(ifNotExists), name, dataType.filter(hasVal).join(' ')]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (fnName) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { exprToSQL } from './expr'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${name}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n            return { name, stmt };\n          },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, l) {\n          return `${n}[offset(${l.value})]`\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`);\n            if (pro) tbl = `${tbl}.${pro[0]}`\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(i) { return i; },\n      peg$c39 = \"unnest\",\n      peg$c40 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c41 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c42 = function(l) { return l; },\n      peg$c43 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c44 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c45 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c46 = function(t) { return t; },\n      peg$c47 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c48 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c49 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c50 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c51 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c52 = function() { return 'LEFT JOIN'; },\n      peg$c53 = function() { return 'RIGHT JOIN'; },\n      peg$c54 = function() { return 'FULL JOIN'; },\n      peg$c55 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c56 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c57 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c58 = function(e) { return e; },\n      peg$c59 = function(e) { return e.value; },\n      peg$c60 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c61 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c62 = function(n) { return n },\n      peg$c63 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c64 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c65 = \"range\",\n      peg$c66 = peg$literalExpectation(\"RANGE\", true),\n      peg$c67 = \"unbounded\",\n      peg$c68 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c69 = \"preceding\",\n      peg$c70 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c71 = \"current\",\n      peg$c72 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c73 = \"ROW\",\n      peg$c74 = peg$literalExpectation(\"ROW\", false),\n      peg$c75 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c76 = \"rows\",\n      peg$c77 = peg$literalExpectation(\"ROWS\", true),\n      peg$c78 = \"following\",\n      peg$c79 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c80 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c81 = function(bc) { return bc; },\n      peg$c82 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c83 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c84 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c85 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c86 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c87 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c90 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c91 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n      },\n      peg$c92 = function(lf, head, rt) { if ((lf && !rt) || (!lf && rt)) return true },\n      peg$c93 = function(lf, head, rt) {\n        if (lf && rt) head.parentheses = true\n        return head\n      },\n      peg$c94 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c95 = \"!\",\n      peg$c96 = peg$literalExpectation(\"!\", false),\n      peg$c97 = \"=\",\n      peg$c98 = peg$literalExpectation(\"=\", false),\n      peg$c99 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c100 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c101 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c102 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c103 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c104 = \">=\",\n      peg$c105 = peg$literalExpectation(\">=\", false),\n      peg$c106 = \">\",\n      peg$c107 = peg$literalExpectation(\">\", false),\n      peg$c108 = \"<=\",\n      peg$c109 = peg$literalExpectation(\"<=\", false),\n      peg$c110 = \"<>\",\n      peg$c111 = peg$literalExpectation(\"<>\", false),\n      peg$c112 = \"<\",\n      peg$c113 = peg$literalExpectation(\"<\", false),\n      peg$c114 = \"!=\",\n      peg$c115 = peg$literalExpectation(\"!=\", false),\n      peg$c116 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c117 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c118 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c119 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c120 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c121 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c122 = \"+\",\n      peg$c123 = peg$literalExpectation(\"+\", false),\n      peg$c124 = \"-\",\n      peg$c125 = peg$literalExpectation(\"-\", false),\n      peg$c126 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c127 = \"*\",\n      peg$c128 = peg$literalExpectation(\"*\", false),\n      peg$c129 = \"/\",\n      peg$c130 = peg$literalExpectation(\"/\", false),\n      peg$c131 = \"%\",\n      peg$c132 = peg$literalExpectation(\"%\", false),\n      peg$c133 = function(e, tail) {\n            e.parentheses = true;\n            if (!tail || tail.length === 0) return e\n            return createBinaryExprChain(e, tail);\n          },\n      peg$c134 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c135 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c136 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c137 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c138 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c139 = function(name) {\n            return name;\n          },\n      peg$c140 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c141 = \"\\\"\",\n      peg$c142 = peg$literalExpectation(\"\\\"\", false),\n      peg$c143 = /^[^\"]/,\n      peg$c144 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c145 = function(chars) { return chars.join(''); },\n      peg$c146 = \"'\",\n      peg$c147 = peg$literalExpectation(\"'\", false),\n      peg$c148 = /^[^']/,\n      peg$c149 = peg$classExpectation([\"'\"], true, false),\n      peg$c150 = \"`\",\n      peg$c151 = peg$literalExpectation(\"`\", false),\n      peg$c152 = /^[^`]/,\n      peg$c153 = peg$classExpectation([\"`\"], true, false),\n      peg$c154 = function(name) {\n          return name;\n        },\n      peg$c155 = function(name) { return name; },\n      peg$c156 = function(start, parts) { return start + parts.join(''); },\n      peg$c157 = /^[A-Za-z_]/,\n      peg$c158 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c159 = /^[A-Za-z0-9_]/,\n      peg$c160 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c161 = /^[A-Za-z0-9_:]/,\n      peg$c162 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c163 = \":\",\n      peg$c164 = peg$literalExpectation(\":\", false),\n      peg$c165 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c166 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c167 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c168 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c169 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c170 = function(e) { return { expr: e }; },\n      peg$c171 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c172 = function() { return { type: 'star', value: '*' }; },\n      peg$c173 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c174 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c175 = \"century\",\n      peg$c176 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c177 = \"day\",\n      peg$c178 = peg$literalExpectation(\"DAY\", true),\n      peg$c179 = \"decade\",\n      peg$c180 = peg$literalExpectation(\"DECADE\", true),\n      peg$c181 = \"dow\",\n      peg$c182 = peg$literalExpectation(\"DOW\", true),\n      peg$c183 = \"doy\",\n      peg$c184 = peg$literalExpectation(\"DOY\", true),\n      peg$c185 = \"epoch\",\n      peg$c186 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c187 = \"hour\",\n      peg$c188 = peg$literalExpectation(\"HOUR\", true),\n      peg$c189 = \"isodow\",\n      peg$c190 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c191 = \"isoyear\",\n      peg$c192 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c193 = \"microseconds\",\n      peg$c194 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c195 = \"millennium\",\n      peg$c196 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c197 = \"milliseconds\",\n      peg$c198 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c199 = \"minute\",\n      peg$c200 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c201 = \"month\",\n      peg$c202 = peg$literalExpectation(\"MONTH\", true),\n      peg$c203 = \"quarter\",\n      peg$c204 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c205 = \"second\",\n      peg$c206 = peg$literalExpectation(\"SECOND\", true),\n      peg$c207 = \"timezone\",\n      peg$c208 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c209 = \"timezone_hour\",\n      peg$c210 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c211 = \"timezone_minute\",\n      peg$c212 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c213 = \"week\",\n      peg$c214 = peg$literalExpectation(\"WEEK\", true),\n      peg$c215 = \"year\",\n      peg$c216 = peg$literalExpectation(\"YEAR\", true),\n      peg$c217 = function() {\n          return f\n        },\n      peg$c218 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c219 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c220 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c221 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c222 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c223 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c224 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c225 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c226 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c227 = \"r\",\n      peg$c228 = peg$literalExpectation(\"R\", true),\n      peg$c229 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c230 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c231 = function(type, lf, rt) { if (lf && rt) return true },\n      peg$c232 = \"on update current_timestamp\",\n      peg$c233 = peg$literalExpectation(\"ON UPDATE CURRENT_TIMESTAMP\", true),\n      peg$c234 = function(type, lf, rt, up) {\n            return {\n              type: 'origin',\n              value: (up ? `${type} ${up}` : type).toLowerCase()\n            };\n          },\n      peg$c235 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c236 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c237 = /^[^'\\\\]/,\n      peg$c238 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c239 = \"\\\\'\",\n      peg$c240 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c241 = function() { return \"'\";  },\n      peg$c242 = \"\\\\\\\"\",\n      peg$c243 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c244 = function() { return '\"';  },\n      peg$c245 = \"\\\\\\\\\",\n      peg$c246 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c247 = function() { return \"\\\\\"; },\n      peg$c248 = \"\\\\/\",\n      peg$c249 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c250 = function() { return \"/\";  },\n      peg$c251 = \"\\\\b\",\n      peg$c252 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c253 = function() { return \"\\b\"; },\n      peg$c254 = \"\\\\f\",\n      peg$c255 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c256 = function() { return \"\\f\"; },\n      peg$c257 = \"\\\\n\",\n      peg$c258 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c259 = function() { return \"\\n\"; },\n      peg$c260 = \"\\\\r\",\n      peg$c261 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c262 = function() { return \"\\r\"; },\n      peg$c263 = \"\\\\t\",\n      peg$c264 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c265 = function() { return \"\\t\"; },\n      peg$c266 = \"\\\\u\",\n      peg$c267 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c268 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c269 = \"\\\\\",\n      peg$c270 = peg$literalExpectation(\"\\\\\", false),\n      peg$c271 = /^[\\n\\r]/,\n      peg$c272 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c273 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c274 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c275 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c276 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c277 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c278 = function(op, digits) { return \"-\" + digits; },\n      peg$c279 = function(op, digit) { return \"-\" + digit; },\n      peg$c280 = \".\",\n      peg$c281 = peg$literalExpectation(\".\", false),\n      peg$c282 = function(digits) { return \".\" + digits; },\n      peg$c283 = function(e, digits) { return e + digits; },\n      peg$c284 = function(digits) { return digits.join(\"\"); },\n      peg$c285 = /^[0-9]/,\n      peg$c286 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c287 = /^[0-9a-fA-F]/,\n      peg$c288 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c289 = /^[eE]/,\n      peg$c290 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c291 = /^[+\\-]/,\n      peg$c292 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c293 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c294 = \"null\",\n      peg$c295 = peg$literalExpectation(\"NULL\", true),\n      peg$c296 = \"default\",\n      peg$c297 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c298 = \"not null\",\n      peg$c299 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c300 = \"true\",\n      peg$c301 = peg$literalExpectation(\"TRUE\", true),\n      peg$c302 = \"to\",\n      peg$c303 = peg$literalExpectation(\"TO\", true),\n      peg$c304 = \"false\",\n      peg$c305 = peg$literalExpectation(\"FALSE\", true),\n      peg$c306 = \"drop\",\n      peg$c307 = peg$literalExpectation(\"DROP\", true),\n      peg$c308 = function() { return 'DROP'; },\n      peg$c309 = \"use\",\n      peg$c310 = peg$literalExpectation(\"USE\", true),\n      peg$c311 = \"select\",\n      peg$c312 = peg$literalExpectation(\"SELECT\", true),\n      peg$c313 = \"if not exists\",\n      peg$c314 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c315 = \"RECURSIVE\",\n      peg$c316 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c317 = \"ignore\",\n      peg$c318 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c319 = \"explain\",\n      peg$c320 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c321 = \"partition\",\n      peg$c322 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c323 = function() { return 'PARTITION' },\n      peg$c324 = \"into\",\n      peg$c325 = peg$literalExpectation(\"INTO\", true),\n      peg$c326 = \"from\",\n      peg$c327 = peg$literalExpectation(\"FROM\", true),\n      peg$c328 = \"set\",\n      peg$c329 = peg$literalExpectation(\"SET\", true),\n      peg$c330 = \"unlock\",\n      peg$c331 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c332 = \"lock\",\n      peg$c333 = peg$literalExpectation(\"LOCK\", true),\n      peg$c334 = \"table\",\n      peg$c335 = peg$literalExpectation(\"TABLE\", true),\n      peg$c336 = function() { return 'TABLE'; },\n      peg$c337 = \"tables\",\n      peg$c338 = peg$literalExpectation(\"TABLES\", true),\n      peg$c339 = function() { return 'TABLES'; },\n      peg$c340 = \"collate\",\n      peg$c341 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c342 = function() { return 'COLLATE'; },\n      peg$c343 = \"on\",\n      peg$c344 = peg$literalExpectation(\"ON\", true),\n      peg$c345 = \"left\",\n      peg$c346 = peg$literalExpectation(\"LEFT\", true),\n      peg$c347 = \"right\",\n      peg$c348 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c349 = \"full\",\n      peg$c350 = peg$literalExpectation(\"FULL\", true),\n      peg$c351 = \"inner\",\n      peg$c352 = peg$literalExpectation(\"INNER\", true),\n      peg$c353 = \"cross\",\n      peg$c354 = peg$literalExpectation(\"CROSS\", true),\n      peg$c355 = \"join\",\n      peg$c356 = peg$literalExpectation(\"JOIN\", true),\n      peg$c357 = \"outer\",\n      peg$c358 = peg$literalExpectation(\"OUTER\", true),\n      peg$c359 = \"over\",\n      peg$c360 = peg$literalExpectation(\"OVER\", true),\n      peg$c361 = \"union\",\n      peg$c362 = peg$literalExpectation(\"UNION\", true),\n      peg$c363 = \"value\",\n      peg$c364 = peg$literalExpectation(\"VALUE\", true),\n      peg$c365 = function() { return 'VALUE' },\n      peg$c366 = \"values\",\n      peg$c367 = peg$literalExpectation(\"VALUES\", true),\n      peg$c368 = \"using\",\n      peg$c369 = peg$literalExpectation(\"USING\", true),\n      peg$c370 = \"where\",\n      peg$c371 = peg$literalExpectation(\"WHERE\", true),\n      peg$c372 = \"with\",\n      peg$c373 = peg$literalExpectation(\"WITH\", true),\n      peg$c374 = \"group\",\n      peg$c375 = peg$literalExpectation(\"GROUP\", true),\n      peg$c376 = \"by\",\n      peg$c377 = peg$literalExpectation(\"BY\", true),\n      peg$c378 = \"order\",\n      peg$c379 = peg$literalExpectation(\"ORDER\", true),\n      peg$c380 = \"having\",\n      peg$c381 = peg$literalExpectation(\"HAVING\", true),\n      peg$c382 = \"window\",\n      peg$c383 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c384 = \"limit\",\n      peg$c385 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c386 = \"offset\",\n      peg$c387 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c388 = function() { return 'OFFSET'; },\n      peg$c389 = \"asc\",\n      peg$c390 = peg$literalExpectation(\"ASC\", true),\n      peg$c391 = function() { return 'ASC'; },\n      peg$c392 = \"desc\",\n      peg$c393 = peg$literalExpectation(\"DESC\", true),\n      peg$c394 = function() { return 'DESC'; },\n      peg$c395 = \"all\",\n      peg$c396 = peg$literalExpectation(\"ALL\", true),\n      peg$c397 = function() { return 'ALL'; },\n      peg$c398 = \"distinct\",\n      peg$c399 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c400 = function() { return 'DISTINCT';},\n      peg$c401 = \"between\",\n      peg$c402 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c403 = function() { return 'BETWEEN'; },\n      peg$c404 = \"in\",\n      peg$c405 = peg$literalExpectation(\"IN\", true),\n      peg$c406 = function() { return 'IN'; },\n      peg$c407 = \"is\",\n      peg$c408 = peg$literalExpectation(\"IS\", true),\n      peg$c409 = function() { return 'IS'; },\n      peg$c410 = \"like\",\n      peg$c411 = peg$literalExpectation(\"LIKE\", true),\n      peg$c412 = function() { return 'LIKE'; },\n      peg$c413 = \"exists\",\n      peg$c414 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c415 = function() { return 'EXISTS'; },\n      peg$c416 = \"not\",\n      peg$c417 = peg$literalExpectation(\"NOT\", true),\n      peg$c418 = function() { return 'NOT'; },\n      peg$c419 = \"and\",\n      peg$c420 = peg$literalExpectation(\"AND\", true),\n      peg$c421 = function() { return 'AND'; },\n      peg$c422 = \"or\",\n      peg$c423 = peg$literalExpectation(\"OR\", true),\n      peg$c424 = function() { return 'OR'; },\n      peg$c425 = \"count\",\n      peg$c426 = peg$literalExpectation(\"COUNT\", true),\n      peg$c427 = function() { return 'COUNT'; },\n      peg$c428 = \"max\",\n      peg$c429 = peg$literalExpectation(\"MAX\", true),\n      peg$c430 = function() { return 'MAX'; },\n      peg$c431 = \"min\",\n      peg$c432 = peg$literalExpectation(\"MIN\", true),\n      peg$c433 = function() { return 'MIN'; },\n      peg$c434 = \"sum\",\n      peg$c435 = peg$literalExpectation(\"SUM\", true),\n      peg$c436 = function() { return 'SUM'; },\n      peg$c437 = \"avg\",\n      peg$c438 = peg$literalExpectation(\"AVG\", true),\n      peg$c439 = function() { return 'AVG'; },\n      peg$c440 = \"extract\",\n      peg$c441 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c442 = function() { return 'EXTRACT'; },\n      peg$c443 = \"call\",\n      peg$c444 = peg$literalExpectation(\"CALL\", true),\n      peg$c445 = function() { return 'CALL'; },\n      peg$c446 = \"case\",\n      peg$c447 = peg$literalExpectation(\"CASE\", true),\n      peg$c448 = \"when\",\n      peg$c449 = peg$literalExpectation(\"WHEN\", true),\n      peg$c450 = \"then\",\n      peg$c451 = peg$literalExpectation(\"THEN\", true),\n      peg$c452 = \"else\",\n      peg$c453 = peg$literalExpectation(\"ELSE\", true),\n      peg$c454 = \"end\",\n      peg$c455 = peg$literalExpectation(\"END\", true),\n      peg$c456 = \"cast\",\n      peg$c457 = peg$literalExpectation(\"CAST\", true),\n      peg$c458 = \"array\",\n      peg$c459 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c460 = function() { return 'ARRAY'; },\n      peg$c461 = \"bytes\",\n      peg$c462 = peg$literalExpectation(\"BYTES\", true),\n      peg$c463 = function() { return 'BYTES'; },\n      peg$c464 = \"bool\",\n      peg$c465 = peg$literalExpectation(\"BOOL\", true),\n      peg$c466 = function() { return 'BOOL'; },\n      peg$c467 = \"char\",\n      peg$c468 = peg$literalExpectation(\"CHAR\", true),\n      peg$c469 = function() { return 'CHAR'; },\n      peg$c470 = \"geography\",\n      peg$c471 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c472 = function() { return 'GEOGRAPHY'; },\n      peg$c473 = \"varchar\",\n      peg$c474 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c475 = function() { return 'VARCHAR';},\n      peg$c476 = \"numeric\",\n      peg$c477 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c478 = function() { return 'NUMERIC'; },\n      peg$c479 = \"decimal\",\n      peg$c480 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c481 = function() { return 'DECIMAL'; },\n      peg$c482 = \"signed\",\n      peg$c483 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c484 = function() { return 'SIGNED'; },\n      peg$c485 = \"unsigned\",\n      peg$c486 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c487 = function() { return 'UNSIGNED'; },\n      peg$c488 = \"int64\",\n      peg$c489 = peg$literalExpectation(\"INT64\", true),\n      peg$c490 = function() { return 'INT64'; },\n      peg$c491 = \"zerofill\",\n      peg$c492 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c493 = function() { return 'ZEROFILL'; },\n      peg$c494 = \"integer\",\n      peg$c495 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c496 = function() { return 'INTEGER'; },\n      peg$c497 = \"json\",\n      peg$c498 = peg$literalExpectation(\"JSON\", true),\n      peg$c499 = function() { return 'JSON'; },\n      peg$c500 = \"smallint\",\n      peg$c501 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c502 = function() { return 'SMALLINT'; },\n      peg$c503 = \"string\",\n      peg$c504 = peg$literalExpectation(\"STRING\", true),\n      peg$c505 = function() { return 'STRING'; },\n      peg$c506 = \"struct\",\n      peg$c507 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c508 = function() { return 'STRUCT'; },\n      peg$c509 = \"tinyint\",\n      peg$c510 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c511 = function() { return 'TINYINT'; },\n      peg$c512 = \"tinytext\",\n      peg$c513 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c514 = function() { return 'TINYTEXT'; },\n      peg$c515 = \"text\",\n      peg$c516 = peg$literalExpectation(\"TEXT\", true),\n      peg$c517 = function() { return 'TEXT'; },\n      peg$c518 = \"mediumtext\",\n      peg$c519 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c520 = function() { return 'MEDIUMTEXT'; },\n      peg$c521 = \"longtext\",\n      peg$c522 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c523 = function() { return 'LONGTEXT'; },\n      peg$c524 = \"bigint\",\n      peg$c525 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c526 = function() { return 'BIGINT'; },\n      peg$c527 = \"float64\",\n      peg$c528 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c529 = function() { return 'FLOAT64'; },\n      peg$c530 = \"double\",\n      peg$c531 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c532 = function() { return 'DOUBLE'; },\n      peg$c533 = \"date\",\n      peg$c534 = peg$literalExpectation(\"DATE\", true),\n      peg$c535 = function() { return 'DATE'; },\n      peg$c536 = \"datetime\",\n      peg$c537 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c538 = function() { return 'DATETIME'; },\n      peg$c539 = \"time\",\n      peg$c540 = peg$literalExpectation(\"TIME\", true),\n      peg$c541 = function() { return 'TIME'; },\n      peg$c542 = \"timestamp\",\n      peg$c543 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c544 = function() { return 'TIMESTAMP'; },\n      peg$c545 = \"truncate\",\n      peg$c546 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c547 = function() { return 'TRUNCATE'; },\n      peg$c548 = \"user\",\n      peg$c549 = peg$literalExpectation(\"USER\", true),\n      peg$c550 = function() { return 'USER'; },\n      peg$c551 = \"current_date\",\n      peg$c552 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c553 = function() { return 'CURRENT_DATE'; },\n      peg$c554 = \"adddate\",\n      peg$c555 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c556 = function() { return 'ADDDATE'; },\n      peg$c557 = \"interval\",\n      peg$c558 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c559 = function() { return 'INTERVAL'; },\n      peg$c560 = function() { return 'YEAR'; },\n      peg$c561 = function() { return 'MONTH'; },\n      peg$c562 = function() { return 'DAY'; },\n      peg$c563 = function() { return 'HOUR'; },\n      peg$c564 = function() { return 'MINUTE'; },\n      peg$c565 = function() { return 'SECOND'; },\n      peg$c566 = \"current_time\",\n      peg$c567 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c568 = function() { return 'CURRENT_TIME'; },\n      peg$c569 = \"current_timestamp\",\n      peg$c570 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c571 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c572 = \"global\",\n      peg$c573 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c574 = function() { return 'GLOBAL'; },\n      peg$c575 = \"session\",\n      peg$c576 = peg$literalExpectation(\"SESSION\", true),\n      peg$c577 = function() { return 'SESSION'; },\n      peg$c578 = \"local\",\n      peg$c579 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c580 = function() { return 'LOCAL'; },\n      peg$c581 = \"persist\",\n      peg$c582 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c583 = function() { return 'PERSIST'; },\n      peg$c584 = \"persist_only\",\n      peg$c585 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c586 = function() { return 'PERSIST_ONLY'; },\n      peg$c587 = \"add\",\n      peg$c588 = peg$literalExpectation(\"ADD\", true),\n      peg$c589 = function() { return 'ADD'; },\n      peg$c590 = \"column\",\n      peg$c591 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c592 = function() { return 'COLUMN'; },\n      peg$c593 = \"index\",\n      peg$c594 = peg$literalExpectation(\"INDEX\", true),\n      peg$c595 = function() { return 'INDEX'; },\n      peg$c596 = \"key\",\n      peg$c597 = peg$literalExpectation(\"KEY\", true),\n      peg$c598 = function() { return 'KEY'; },\n      peg$c599 = \"fulltext\",\n      peg$c600 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c601 = function() { return 'FULLTEXT'; },\n      peg$c602 = \"unique\",\n      peg$c603 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c604 = function() { return 'UNIQUE'; },\n      peg$c605 = \"comment\",\n      peg$c606 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c607 = function() { return 'COMMENT'; },\n      peg$c608 = \"constraint\",\n      peg$c609 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c610 = function() { return 'CONSTRAINT'; },\n      peg$c611 = \"references\",\n      peg$c612 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c613 = function() { return 'REFERENCES'; },\n      peg$c614 = \",\",\n      peg$c615 = peg$literalExpectation(\",\", false),\n      peg$c616 = \"[\",\n      peg$c617 = peg$literalExpectation(\"[\", false),\n      peg$c618 = \"]\",\n      peg$c619 = peg$literalExpectation(\"]\", false),\n      peg$c620 = \";\",\n      peg$c621 = peg$literalExpectation(\";\", false),\n      peg$c622 = \"||\",\n      peg$c623 = peg$literalExpectation(\"||\", false),\n      peg$c624 = \"&&\",\n      peg$c625 = peg$literalExpectation(\"&&\", false),\n      peg$c626 = \"/*\",\n      peg$c627 = peg$literalExpectation(\"/*\", false),\n      peg$c628 = \"*/\",\n      peg$c629 = peg$literalExpectation(\"*/\", false),\n      peg$c630 = \"--\",\n      peg$c631 = peg$literalExpectation(\"--\", false),\n      peg$c632 = \"#\",\n      peg$c633 = peg$literalExpectation(\"#\", false),\n      peg$c634 = peg$anyExpectation(),\n      peg$c635 = /^[ \\t\\n\\r]/,\n      peg$c636 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c637 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c638 = function(n) {\n            return n\n          },\n      peg$c639 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c640 = function(t) { return { dataType: t }; },\n      peg$c641 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsewindow_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_alias();\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c39) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c41(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c42(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c45(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c46(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c47(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c48(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c49(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c51(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c52();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c54();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_INNER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_CROSS();\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c55(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c59(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c62(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c63(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c64(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c65) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c67) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c71) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c73) {\n                            s12 = peg$c73;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c75();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c78) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c80(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c81(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseor_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c86(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c87(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c90(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_or_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_or_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_or_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_or_expr() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c92(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c93(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c95;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c96); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c97;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c98); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c100(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c101(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c104) {\n      s0 = peg$c104;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c106;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c107); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c108) {\n          s0 = peg$c108;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c109); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c110) {\n            s0 = peg$c110;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c111); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c112;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c97;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c114) {\n                  s0 = peg$c114;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c117(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c118(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c119(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c120(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c121(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c122;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c124;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c126(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c129;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c131;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseinterval_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecolumn_ref();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseparam();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseLPAREN();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse__();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseexpr();\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse__();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parseRPAREN();\n                          if (s5 !== peg$FAILED) {\n                            s6 = [];\n                            s7 = peg$currPos;\n                            s8 = peg$parse___();\n                            if (s8 !== peg$FAILED) {\n                              s9 = peg$parseKW_AND();\n                              if (s9 === peg$FAILED) {\n                                s9 = peg$parseKW_OR();\n                              }\n                              if (s9 !== peg$FAILED) {\n                                s10 = peg$parse__();\n                                if (s10 !== peg$FAILED) {\n                                  s11 = peg$parseor_expr();\n                                  if (s11 !== peg$FAILED) {\n                                    s8 = [s8, s9, s10, s11];\n                                    s7 = s8;\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                            while (s7 !== peg$FAILED) {\n                              s6.push(s7);\n                              s7 = peg$currPos;\n                              s8 = peg$parse___();\n                              if (s8 !== peg$FAILED) {\n                                s9 = peg$parseKW_AND();\n                                if (s9 === peg$FAILED) {\n                                  s9 = peg$parseKW_OR();\n                                }\n                                if (s9 !== peg$FAILED) {\n                                  s10 = peg$parse__();\n                                  if (s10 !== peg$FAILED) {\n                                    s11 = peg$parseor_expr();\n                                    if (s11 !== peg$FAILED) {\n                                      s8 = [s8, s9, s10, s11];\n                                      s7 = s8;\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                            }\n                            if (s6 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c133(s3, s6);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseexpr_list();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c134(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c135(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c136(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c137(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c138(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c140(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c141;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c142); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c143.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c144); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c143.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c144); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c141;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c142); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c145(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c146;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c148.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c149); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c148.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c146;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c147); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c145(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c150;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c152.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c153); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c152.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c150;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c145(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c154(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c138(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c155(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c156(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c156(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c157.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c159.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c160); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c161.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c163;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c165(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c166(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c167(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c168(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c169(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c170(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c171(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c127;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c172();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c173(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr_list();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c173(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseextract_func();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c174(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c175) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c177) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c178); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c179) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c180); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c181) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c182); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c183) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c184); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c185) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c186); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c188); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c189) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c190); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c191) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c192); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c193) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c194); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c195) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c196); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c197) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c198); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c201) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c203) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c204); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c205) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c207) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c209) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c211) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c213) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c215) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c217();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c218(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c219(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c220(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c221(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c222(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c223();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c224();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c225();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c226();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c227) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c146;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c147); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c146;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c229(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c227) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c228); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c141;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c142); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c141;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c142); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c229(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c146;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c147); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c146;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c230(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CURRENT_TIMESTAMP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c231(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 27).toLowerCase() === peg$c232) {\n                      s8 = input.substr(peg$currPos, 27);\n                      peg$currPos += 27;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c233); }\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c234(s1, s3, s5, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c235.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c237.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c239) {\n      s1 = peg$c239;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c241();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c242) {\n        s1 = peg$c242;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c243); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c244();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c245) {\n          s1 = peg$c245;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c246); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c247();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c248) {\n            s1 = peg$c248;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c249); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c250();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c251) {\n              s1 = peg$c251;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c252); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c253();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c254) {\n                s1 = peg$c254;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c255); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c256();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c257) {\n                  s1 = peg$c257;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c258); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c259();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c260) {\n                    s1 = peg$c260;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c261); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c262();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c263) {\n                      s1 = peg$c263;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c264); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c265();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c266) {\n                        s1 = peg$c266;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c267); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c268(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c269;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c270); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c247();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c271.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c272); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c273(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c274(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c275(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c276(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c277(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c124;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c122;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c123); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c278(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c124;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c122;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c279(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c280;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c282(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c283(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c284(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c285.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c286); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c287.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c289.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c290); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c291.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c292); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c293(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c294) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c295); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c296) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c297); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c298) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c300) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c301); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c302) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c303); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c304) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c305); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c306) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c308();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c309) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c311) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c313) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c314); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c315) {\n      s1 = peg$c315;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c316); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c317) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c318); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c319) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c320); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c321) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c322); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c323();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c330) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c331); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c332) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c333); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c336();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c339();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c340) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c342();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c343) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c344); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c345) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c346); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c349) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c351) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c352); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c353) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c354); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c357) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c359) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c360); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c365();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c366) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c367); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c368) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c369); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c372) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c373); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c374) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c375); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c378) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c379); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c380) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c381); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c388();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c389) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c390); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c391();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c392) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c394();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c395) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c397();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c398) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c399); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c400();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c401) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c402); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c403();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c404) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c405); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c406();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c407) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c408); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c409();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c410) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c412();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c413) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c414); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c415();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c416) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c418();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c419) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c420); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c421();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c422) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c423); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c425) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c426); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c427();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c428) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c429); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c430();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c431) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c432); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c433();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c434) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c435); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c436();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c437) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c438); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c439();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c440) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c441); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c442();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c443) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c444); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c445();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c446) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c447); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c448) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c452) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c454) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c460();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c464) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c465); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c467) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c469();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c470) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c471); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c472();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c473) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c474); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c475();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c476) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c477); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c478();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c479) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c480); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c481();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c482) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c483); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c484();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c485) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c486); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c487();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c488) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c490();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c491) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c492); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c493();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c494) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c495); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c496();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c497) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c498); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c499();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c503) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c504); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c505();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c506) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c507); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c508();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c509) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c510); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c511();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c512) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c513); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c514();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c515) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c516); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c517();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c520();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c521) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c523();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c524) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c525); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c526();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c527) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c528); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c529();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c530) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c531); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c532();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c533) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c534); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c535();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c536) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c537); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c538();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c539) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c541();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c542) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c544();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c545) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c546); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c547();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c548) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c550();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c551) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c552); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c553();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c554) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c555); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c556();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c557) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c558); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c559();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c215) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c216); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c201) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c202); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c561();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c177) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c178); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c562();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c564();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c205) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c206); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c565();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c566) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c567); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c568();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c569) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c570); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c571();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c575) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c577();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c580();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c581) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c583();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c584) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c585); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c586();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c587) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c588); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c589();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c590) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c592();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c593) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c594); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c595();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c596) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c598();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c599) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c600); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c601();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c602) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c607();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c608) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c609); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c610();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c613();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c280;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c614;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c112;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c106;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c616;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c617); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c618;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c620;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c622) {\n      s0 = peg$c622;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c623); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c624) {\n      s0 = peg$c624;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c626) {\n      s1 = peg$c626;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c628) {\n        s5 = peg$c628;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c629); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c628) {\n          s5 = peg$c628;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c629); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c628) {\n          s3 = peg$c628;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c629); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c630) {\n      s1 = peg$c630;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c632;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c635.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c271.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c272); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c271.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c272); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c637(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c638(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c639(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c641(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c641(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}