{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c40","peg$c45","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c66","peg$c68","peg$c70","peg$c72","peg$c74","peg$c77","peg$c79","peg$c94","createBinaryExprChain","peg$c96","peg$c98","peg$c102","nk","peg$c105","peg$c107","peg$c109","peg$c111","peg$c113","peg$c115","peg$c123","peg$c125","peg$c128","peg$c130","peg$c132","peg$c138","reservedMap","peg$c142","peg$c143","peg$c144","peg$classExpectation","peg$c145","chars","peg$c147","peg$c148","peg$c149","peg$c151","peg$c152","peg$c153","peg$c156","peg$c157","peg$c158","peg$c159","peg$c160","peg$c161","peg$c162","peg$c164","peg$c173","bc","args","over","peg$c176","peg$c178","peg$c180","peg$c182","peg$c184","peg$c186","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c228","peg$c229","ca","peg$c233","peg$c235","peg$c236","peg$c237","peg$c238","peg$c240","peg$c243","peg$c246","peg$c249","peg$c252","peg$c255","peg$c258","peg$c261","peg$c264","peg$c267","peg$c270","peg$c271","peg$c272","peg$c281","peg$c285","peg$c286","peg$c287","peg$c288","peg$c289","peg$c290","peg$c291","peg$c292","peg$c295","peg$c301","peg$c305","peg$c312","peg$c322","peg$c327","peg$c344","peg$c346","peg$c348","peg$c350","peg$c352","peg$c354","peg$c356","peg$c358","peg$c360","peg$c362","peg$c364","peg$c369","peg$c371","peg$c373","peg$c375","peg$c377","peg$c379","peg$c381","peg$c383","peg$c385","peg$c387","peg$c390","peg$c393","peg$c396","peg$c399","peg$c402","peg$c405","peg$c408","peg$c411","peg$c414","peg$c417","peg$c420","peg$c423","peg$c426","peg$c429","peg$c432","peg$c435","peg$c438","peg$c441","peg$c457","peg$c459","peg$c462","peg$c465","peg$c471","peg$c477","peg$c480","peg$c483","peg$c486","peg$c489","peg$c495","peg$c504","peg$c507","peg$c528","peg$c534","peg$c537","peg$c540","peg$c543","peg$c552","peg$c558","peg$c567","peg$c570","peg$c615","peg$c617","peg$c619","peg$c621","peg$c623","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c634","peg$c635","peg$c636","peg$c640","dataType","peg$c641","a","definition","anglebracket","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","substr","toLowerCase","peg$parseident_start","peg$parseKW_LIMIT","peg$parsenumber_or_param","peg$parseKW_OFFSET","i1","res","seperator","peg$c83","peg$parselimit_clause","cte","with","select","orderby","limit","parentheses","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","_next","union","peg$c15","s11","s13","s15","s17","s19","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","keyword","peg$parsewith_offset","expr","with_offset","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseparentheses_or_expr","peg$parseKW_AND","peg$parseKW_OR","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","isArray","info","db","as_struct_val","distinct","for_sys_time_as_of","where","groupby","having","window","peg$c19","peg$parseselect_stmt_nake","parentheses_symbol","peg$parseident_name","stmt","peg$parseSTAR","peg$parsecolumns_list","expr_list","star","peg$parsecolumn_list_item","tbl","pro","peg$parseident","peg$parseDOT","peg$parseLBRAKE","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parsecolumn_offset_expr","peg$parseexpr_alias","JSON","stringify","peg$c140","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","op","using","peg$parseon_clause","on","peg$c48","alias","peg$c49","peg$parsetable_join","peg$parsetable_name","peg$c51","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","peg$parseKW_CROSS","project","dt","obj","peg$c56","peg$c57","peg$parseKW_ON","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","e","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c82","peg$parseparam","el","peg$c84","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseor_expr","array_path","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","map","peg$c86","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c87","peg$parsearray_expr","rt","lf","peg$c92","peg$parseand_expr","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$parseliteral_string","peg$c121","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c117","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","createBinaryExpr","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","peg$parsedata_type","symbol","target","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c220","scale","peg$c221","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c222","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$c174","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","kw","field","cast_type","source","peg$c218","peg$parseextract_func","peg$parsefunc_call","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parseinterval_expr","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c137","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parsesingle_char","peg$c231","up","peg$c234","peg$parseliteral_datetime","peg$parsesingle_quote_char","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c275","exp","peg$c276","peg$c277","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","field_name","field_type","peg$c639","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parseKW_DATETIME","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","result","queryTableAlias","tableName","newColumnsList","Set","keys","columnInfo","split","require","PARSER_NAME","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","literalToSQL","shift","commentToSQL","toUpper","onPartitionsToSQL","filter","hasVal","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","exprToSQL","identifierToSql","constraintDefinitionToSQL","constraintDefinition","constraint","index","referenceDefinition","reference_definition","constraintSQL","columnReferenceDefinitionToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","overToSQL","windowSQL","partition","order","castToSQL","expression","str","prefix","symbolChar","suffix","funcToSQL","overStr","tableToSQL","database","tablesToSQL","tables","unnestExpr","withOffset","commonOptionConnector","unnestToSQL","baseTable","clauses","joinExpr","tableOptionToSQL","tableOption","sql","columnRefToSQL","arrow","collate","isDual","commonTypeValue","columnDataType","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrderToSQL","columnOrder","nulls","opclass","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","check","comment","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","autoIncreatementToSQL","columnOption","columnsToSQL","getDual","exprList","columnsStr","columnIdentifierToSql","columnToSQL","DEFAULT_OPT","parserOpt","action","opt","connector","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","ident","val","replaceParams","params","replaceParamsInner","partitions","arrayStructTypeToSQL","dataTypeUpper","triggerEventToSQL","events","event","kwArgs","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","alterExprToSQL","createDefinition","create_definitions","ifNotExists","if_not_exists","resource","createDefinitionToSQL","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","recursive","withExprStr","selectToSQL","asStructVal","forSystem","forUpdate","for_update","top","windowInfo","withInfo","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","arrayStructValueToSQL","arrayPath","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","aggr_func","fnName","window_func","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","constructArgsList","assign","leftVar","rightVal","extract","castType","binary_expr","rstr","isBetween","case","conditions","len","cond","cast","column_ref","function","interval","intervalExpr","show","struct","namedWindowExprInfo","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexSQL","setToSQL","sets","set","setItem","valuesToSQL","values","partitionToSQL","partitionArr","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","members","varName","unionToSQL","unary_expr","typeToSQLFn","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTableName","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createTriggerToSQL","extension","schema","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","delete","addition","update","insert","onDuplicateUpdate","on_duplicate_update","duplicateSet","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","lock","unlock","fun","_orderby","_limit","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","Parser","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"bigquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n            return { name, stmt };\n          },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, l) {\n          return `${n}[offset(${l.value})]`\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`);\n            if (pro) tbl = `${tbl}.${pro[0]}`\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(i) { return i; },\n      peg$c39 = \"unnest\",\n      peg$c40 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c41 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c42 = function(l) { return l; },\n      peg$c43 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c44 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c45 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c46 = function(t) { return t; },\n      peg$c47 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c48 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c49 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c50 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c51 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c52 = function() { return 'LEFT JOIN'; },\n      peg$c53 = function() { return 'RIGHT JOIN'; },\n      peg$c54 = function() { return 'FULL JOIN'; },\n      peg$c55 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c56 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c57 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c58 = function(e) { return e; },\n      peg$c59 = function(e) { return e.value; },\n      peg$c60 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c61 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c62 = function(n) { return n },\n      peg$c63 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c64 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c65 = \"range\",\n      peg$c66 = peg$literalExpectation(\"RANGE\", true),\n      peg$c67 = \"unbounded\",\n      peg$c68 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c69 = \"preceding\",\n      peg$c70 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c71 = \"current\",\n      peg$c72 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c73 = \"ROW\",\n      peg$c74 = peg$literalExpectation(\"ROW\", false),\n      peg$c75 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c76 = \"rows\",\n      peg$c77 = peg$literalExpectation(\"ROWS\", true),\n      peg$c78 = \"following\",\n      peg$c79 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c80 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c81 = function(bc) { return bc; },\n      peg$c82 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c83 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c84 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c85 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c86 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c87 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c90 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c91 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n      },\n      peg$c92 = function(lf, head, rt) { if ((lf && !rt) || (!lf && rt)) return true },\n      peg$c93 = function(lf, head, rt) {\n        if (lf && rt) head.parentheses = true\n        return head\n      },\n      peg$c94 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c95 = \"!\",\n      peg$c96 = peg$literalExpectation(\"!\", false),\n      peg$c97 = \"=\",\n      peg$c98 = peg$literalExpectation(\"=\", false),\n      peg$c99 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c100 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c101 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c102 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c103 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c104 = \">=\",\n      peg$c105 = peg$literalExpectation(\">=\", false),\n      peg$c106 = \">\",\n      peg$c107 = peg$literalExpectation(\">\", false),\n      peg$c108 = \"<=\",\n      peg$c109 = peg$literalExpectation(\"<=\", false),\n      peg$c110 = \"<>\",\n      peg$c111 = peg$literalExpectation(\"<>\", false),\n      peg$c112 = \"<\",\n      peg$c113 = peg$literalExpectation(\"<\", false),\n      peg$c114 = \"!=\",\n      peg$c115 = peg$literalExpectation(\"!=\", false),\n      peg$c116 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c117 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c118 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c119 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c120 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c121 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c122 = \"+\",\n      peg$c123 = peg$literalExpectation(\"+\", false),\n      peg$c124 = \"-\",\n      peg$c125 = peg$literalExpectation(\"-\", false),\n      peg$c126 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c127 = \"*\",\n      peg$c128 = peg$literalExpectation(\"*\", false),\n      peg$c129 = \"/\",\n      peg$c130 = peg$literalExpectation(\"/\", false),\n      peg$c131 = \"%\",\n      peg$c132 = peg$literalExpectation(\"%\", false),\n      peg$c133 = function(e, tail) {\n            e.parentheses = true;\n            if (!tail || tail.length === 0) return e\n            return createBinaryExprChain(e, tail);\n          },\n      peg$c134 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c135 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c136 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c137 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c138 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c139 = function(name) {\n            return name;\n          },\n      peg$c140 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c141 = \"\\\"\",\n      peg$c142 = peg$literalExpectation(\"\\\"\", false),\n      peg$c143 = /^[^\"]/,\n      peg$c144 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c145 = function(chars) { return chars.join(''); },\n      peg$c146 = \"'\",\n      peg$c147 = peg$literalExpectation(\"'\", false),\n      peg$c148 = /^[^']/,\n      peg$c149 = peg$classExpectation([\"'\"], true, false),\n      peg$c150 = \"`\",\n      peg$c151 = peg$literalExpectation(\"`\", false),\n      peg$c152 = /^[^`]/,\n      peg$c153 = peg$classExpectation([\"`\"], true, false),\n      peg$c154 = function(name) {\n          return name;\n        },\n      peg$c155 = function(name) { return name; },\n      peg$c156 = function(start, parts) { return start + parts.join(''); },\n      peg$c157 = /^[A-Za-z_]/,\n      peg$c158 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c159 = /^[A-Za-z0-9_]/,\n      peg$c160 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c161 = /^[A-Za-z0-9_:]/,\n      peg$c162 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c163 = \":\",\n      peg$c164 = peg$literalExpectation(\":\", false),\n      peg$c165 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c166 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c167 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c168 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c169 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c170 = function(e) { return { expr: e }; },\n      peg$c171 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c172 = function() { return { type: 'star', value: '*' }; },\n      peg$c173 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c174 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c175 = \"century\",\n      peg$c176 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c177 = \"day\",\n      peg$c178 = peg$literalExpectation(\"DAY\", true),\n      peg$c179 = \"decade\",\n      peg$c180 = peg$literalExpectation(\"DECADE\", true),\n      peg$c181 = \"dow\",\n      peg$c182 = peg$literalExpectation(\"DOW\", true),\n      peg$c183 = \"doy\",\n      peg$c184 = peg$literalExpectation(\"DOY\", true),\n      peg$c185 = \"epoch\",\n      peg$c186 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c187 = \"hour\",\n      peg$c188 = peg$literalExpectation(\"HOUR\", true),\n      peg$c189 = \"isodow\",\n      peg$c190 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c191 = \"isoyear\",\n      peg$c192 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c193 = \"microseconds\",\n      peg$c194 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c195 = \"millennium\",\n      peg$c196 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c197 = \"milliseconds\",\n      peg$c198 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c199 = \"minute\",\n      peg$c200 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c201 = \"month\",\n      peg$c202 = peg$literalExpectation(\"MONTH\", true),\n      peg$c203 = \"quarter\",\n      peg$c204 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c205 = \"second\",\n      peg$c206 = peg$literalExpectation(\"SECOND\", true),\n      peg$c207 = \"timezone\",\n      peg$c208 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c209 = \"timezone_hour\",\n      peg$c210 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c211 = \"timezone_minute\",\n      peg$c212 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c213 = \"week\",\n      peg$c214 = peg$literalExpectation(\"WEEK\", true),\n      peg$c215 = \"year\",\n      peg$c216 = peg$literalExpectation(\"YEAR\", true),\n      peg$c217 = function() {\n          return f\n        },\n      peg$c218 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c219 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c220 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c221 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c222 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c223 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c224 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c225 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c226 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c227 = \"r\",\n      peg$c228 = peg$literalExpectation(\"R\", true),\n      peg$c229 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c230 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c231 = function(type, lf, rt) { if (lf && rt) return true },\n      peg$c232 = \"on update current_timestamp\",\n      peg$c233 = peg$literalExpectation(\"ON UPDATE CURRENT_TIMESTAMP\", true),\n      peg$c234 = function(type, lf, rt, up) {\n            return {\n              type: 'origin',\n              value: (up ? `${type} ${up}` : type).toLowerCase()\n            };\n          },\n      peg$c235 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c236 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c237 = /^[^'\\\\]/,\n      peg$c238 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c239 = \"\\\\'\",\n      peg$c240 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c241 = function() { return \"'\";  },\n      peg$c242 = \"\\\\\\\"\",\n      peg$c243 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c244 = function() { return '\"';  },\n      peg$c245 = \"\\\\\\\\\",\n      peg$c246 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c247 = function() { return \"\\\\\"; },\n      peg$c248 = \"\\\\/\",\n      peg$c249 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c250 = function() { return \"/\";  },\n      peg$c251 = \"\\\\b\",\n      peg$c252 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c253 = function() { return \"\\b\"; },\n      peg$c254 = \"\\\\f\",\n      peg$c255 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c256 = function() { return \"\\f\"; },\n      peg$c257 = \"\\\\n\",\n      peg$c258 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c259 = function() { return \"\\n\"; },\n      peg$c260 = \"\\\\r\",\n      peg$c261 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c262 = function() { return \"\\r\"; },\n      peg$c263 = \"\\\\t\",\n      peg$c264 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c265 = function() { return \"\\t\"; },\n      peg$c266 = \"\\\\u\",\n      peg$c267 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c268 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c269 = \"\\\\\",\n      peg$c270 = peg$literalExpectation(\"\\\\\", false),\n      peg$c271 = /^[\\n\\r]/,\n      peg$c272 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c273 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c274 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c275 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c276 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c277 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c278 = function(op, digits) { return \"-\" + digits; },\n      peg$c279 = function(op, digit) { return \"-\" + digit; },\n      peg$c280 = \".\",\n      peg$c281 = peg$literalExpectation(\".\", false),\n      peg$c282 = function(digits) { return \".\" + digits; },\n      peg$c283 = function(e, digits) { return e + digits; },\n      peg$c284 = function(digits) { return digits.join(\"\"); },\n      peg$c285 = /^[0-9]/,\n      peg$c286 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c287 = /^[0-9a-fA-F]/,\n      peg$c288 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c289 = /^[eE]/,\n      peg$c290 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c291 = /^[+\\-]/,\n      peg$c292 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c293 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c294 = \"null\",\n      peg$c295 = peg$literalExpectation(\"NULL\", true),\n      peg$c296 = \"default\",\n      peg$c297 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c298 = \"not null\",\n      peg$c299 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c300 = \"true\",\n      peg$c301 = peg$literalExpectation(\"TRUE\", true),\n      peg$c302 = \"to\",\n      peg$c303 = peg$literalExpectation(\"TO\", true),\n      peg$c304 = \"false\",\n      peg$c305 = peg$literalExpectation(\"FALSE\", true),\n      peg$c306 = \"drop\",\n      peg$c307 = peg$literalExpectation(\"DROP\", true),\n      peg$c308 = function() { return 'DROP'; },\n      peg$c309 = \"use\",\n      peg$c310 = peg$literalExpectation(\"USE\", true),\n      peg$c311 = \"select\",\n      peg$c312 = peg$literalExpectation(\"SELECT\", true),\n      peg$c313 = \"if not exists\",\n      peg$c314 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c315 = \"RECURSIVE\",\n      peg$c316 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c317 = \"ignore\",\n      peg$c318 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c319 = \"explain\",\n      peg$c320 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c321 = \"partition\",\n      peg$c322 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c323 = function() { return 'PARTITION' },\n      peg$c324 = \"into\",\n      peg$c325 = peg$literalExpectation(\"INTO\", true),\n      peg$c326 = \"from\",\n      peg$c327 = peg$literalExpectation(\"FROM\", true),\n      peg$c328 = \"set\",\n      peg$c329 = peg$literalExpectation(\"SET\", true),\n      peg$c330 = \"unlock\",\n      peg$c331 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c332 = \"lock\",\n      peg$c333 = peg$literalExpectation(\"LOCK\", true),\n      peg$c334 = \"table\",\n      peg$c335 = peg$literalExpectation(\"TABLE\", true),\n      peg$c336 = function() { return 'TABLE'; },\n      peg$c337 = \"tables\",\n      peg$c338 = peg$literalExpectation(\"TABLES\", true),\n      peg$c339 = function() { return 'TABLES'; },\n      peg$c340 = \"collate\",\n      peg$c341 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c342 = function() { return 'COLLATE'; },\n      peg$c343 = \"on\",\n      peg$c344 = peg$literalExpectation(\"ON\", true),\n      peg$c345 = \"left\",\n      peg$c346 = peg$literalExpectation(\"LEFT\", true),\n      peg$c347 = \"right\",\n      peg$c348 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c349 = \"full\",\n      peg$c350 = peg$literalExpectation(\"FULL\", true),\n      peg$c351 = \"inner\",\n      peg$c352 = peg$literalExpectation(\"INNER\", true),\n      peg$c353 = \"cross\",\n      peg$c354 = peg$literalExpectation(\"CROSS\", true),\n      peg$c355 = \"join\",\n      peg$c356 = peg$literalExpectation(\"JOIN\", true),\n      peg$c357 = \"outer\",\n      peg$c358 = peg$literalExpectation(\"OUTER\", true),\n      peg$c359 = \"over\",\n      peg$c360 = peg$literalExpectation(\"OVER\", true),\n      peg$c361 = \"union\",\n      peg$c362 = peg$literalExpectation(\"UNION\", true),\n      peg$c363 = \"value\",\n      peg$c364 = peg$literalExpectation(\"VALUE\", true),\n      peg$c365 = function() { return 'VALUE' },\n      peg$c366 = \"values\",\n      peg$c367 = peg$literalExpectation(\"VALUES\", true),\n      peg$c368 = \"using\",\n      peg$c369 = peg$literalExpectation(\"USING\", true),\n      peg$c370 = \"where\",\n      peg$c371 = peg$literalExpectation(\"WHERE\", true),\n      peg$c372 = \"with\",\n      peg$c373 = peg$literalExpectation(\"WITH\", true),\n      peg$c374 = \"group\",\n      peg$c375 = peg$literalExpectation(\"GROUP\", true),\n      peg$c376 = \"by\",\n      peg$c377 = peg$literalExpectation(\"BY\", true),\n      peg$c378 = \"order\",\n      peg$c379 = peg$literalExpectation(\"ORDER\", true),\n      peg$c380 = \"having\",\n      peg$c381 = peg$literalExpectation(\"HAVING\", true),\n      peg$c382 = \"window\",\n      peg$c383 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c384 = \"limit\",\n      peg$c385 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c386 = \"offset\",\n      peg$c387 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c388 = function() { return 'OFFSET'; },\n      peg$c389 = \"asc\",\n      peg$c390 = peg$literalExpectation(\"ASC\", true),\n      peg$c391 = function() { return 'ASC'; },\n      peg$c392 = \"desc\",\n      peg$c393 = peg$literalExpectation(\"DESC\", true),\n      peg$c394 = function() { return 'DESC'; },\n      peg$c395 = \"all\",\n      peg$c396 = peg$literalExpectation(\"ALL\", true),\n      peg$c397 = function() { return 'ALL'; },\n      peg$c398 = \"distinct\",\n      peg$c399 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c400 = function() { return 'DISTINCT';},\n      peg$c401 = \"between\",\n      peg$c402 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c403 = function() { return 'BETWEEN'; },\n      peg$c404 = \"in\",\n      peg$c405 = peg$literalExpectation(\"IN\", true),\n      peg$c406 = function() { return 'IN'; },\n      peg$c407 = \"is\",\n      peg$c408 = peg$literalExpectation(\"IS\", true),\n      peg$c409 = function() { return 'IS'; },\n      peg$c410 = \"like\",\n      peg$c411 = peg$literalExpectation(\"LIKE\", true),\n      peg$c412 = function() { return 'LIKE'; },\n      peg$c413 = \"exists\",\n      peg$c414 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c415 = function() { return 'EXISTS'; },\n      peg$c416 = \"not\",\n      peg$c417 = peg$literalExpectation(\"NOT\", true),\n      peg$c418 = function() { return 'NOT'; },\n      peg$c419 = \"and\",\n      peg$c420 = peg$literalExpectation(\"AND\", true),\n      peg$c421 = function() { return 'AND'; },\n      peg$c422 = \"or\",\n      peg$c423 = peg$literalExpectation(\"OR\", true),\n      peg$c424 = function() { return 'OR'; },\n      peg$c425 = \"count\",\n      peg$c426 = peg$literalExpectation(\"COUNT\", true),\n      peg$c427 = function() { return 'COUNT'; },\n      peg$c428 = \"max\",\n      peg$c429 = peg$literalExpectation(\"MAX\", true),\n      peg$c430 = function() { return 'MAX'; },\n      peg$c431 = \"min\",\n      peg$c432 = peg$literalExpectation(\"MIN\", true),\n      peg$c433 = function() { return 'MIN'; },\n      peg$c434 = \"sum\",\n      peg$c435 = peg$literalExpectation(\"SUM\", true),\n      peg$c436 = function() { return 'SUM'; },\n      peg$c437 = \"avg\",\n      peg$c438 = peg$literalExpectation(\"AVG\", true),\n      peg$c439 = function() { return 'AVG'; },\n      peg$c440 = \"extract\",\n      peg$c441 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c442 = function() { return 'EXTRACT'; },\n      peg$c443 = \"call\",\n      peg$c444 = peg$literalExpectation(\"CALL\", true),\n      peg$c445 = function() { return 'CALL'; },\n      peg$c446 = \"case\",\n      peg$c447 = peg$literalExpectation(\"CASE\", true),\n      peg$c448 = \"when\",\n      peg$c449 = peg$literalExpectation(\"WHEN\", true),\n      peg$c450 = \"then\",\n      peg$c451 = peg$literalExpectation(\"THEN\", true),\n      peg$c452 = \"else\",\n      peg$c453 = peg$literalExpectation(\"ELSE\", true),\n      peg$c454 = \"end\",\n      peg$c455 = peg$literalExpectation(\"END\", true),\n      peg$c456 = \"cast\",\n      peg$c457 = peg$literalExpectation(\"CAST\", true),\n      peg$c458 = \"array\",\n      peg$c459 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c460 = function() { return 'ARRAY'; },\n      peg$c461 = \"bytes\",\n      peg$c462 = peg$literalExpectation(\"BYTES\", true),\n      peg$c463 = function() { return 'BYTES'; },\n      peg$c464 = \"bool\",\n      peg$c465 = peg$literalExpectation(\"BOOL\", true),\n      peg$c466 = function() { return 'BOOL'; },\n      peg$c467 = \"char\",\n      peg$c468 = peg$literalExpectation(\"CHAR\", true),\n      peg$c469 = function() { return 'CHAR'; },\n      peg$c470 = \"geography\",\n      peg$c471 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c472 = function() { return 'GEOGRAPHY'; },\n      peg$c473 = \"varchar\",\n      peg$c474 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c475 = function() { return 'VARCHAR';},\n      peg$c476 = \"numeric\",\n      peg$c477 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c478 = function() { return 'NUMERIC'; },\n      peg$c479 = \"decimal\",\n      peg$c480 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c481 = function() { return 'DECIMAL'; },\n      peg$c482 = \"signed\",\n      peg$c483 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c484 = function() { return 'SIGNED'; },\n      peg$c485 = \"unsigned\",\n      peg$c486 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c487 = function() { return 'UNSIGNED'; },\n      peg$c488 = \"int64\",\n      peg$c489 = peg$literalExpectation(\"INT64\", true),\n      peg$c490 = function() { return 'INT64'; },\n      peg$c491 = \"zerofill\",\n      peg$c492 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c493 = function() { return 'ZEROFILL'; },\n      peg$c494 = \"integer\",\n      peg$c495 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c496 = function() { return 'INTEGER'; },\n      peg$c497 = \"json\",\n      peg$c498 = peg$literalExpectation(\"JSON\", true),\n      peg$c499 = function() { return 'JSON'; },\n      peg$c500 = \"smallint\",\n      peg$c501 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c502 = function() { return 'SMALLINT'; },\n      peg$c503 = \"string\",\n      peg$c504 = peg$literalExpectation(\"STRING\", true),\n      peg$c505 = function() { return 'STRING'; },\n      peg$c506 = \"struct\",\n      peg$c507 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c508 = function() { return 'STRUCT'; },\n      peg$c509 = \"tinyint\",\n      peg$c510 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c511 = function() { return 'TINYINT'; },\n      peg$c512 = \"tinytext\",\n      peg$c513 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c514 = function() { return 'TINYTEXT'; },\n      peg$c515 = \"text\",\n      peg$c516 = peg$literalExpectation(\"TEXT\", true),\n      peg$c517 = function() { return 'TEXT'; },\n      peg$c518 = \"mediumtext\",\n      peg$c519 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c520 = function() { return 'MEDIUMTEXT'; },\n      peg$c521 = \"longtext\",\n      peg$c522 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c523 = function() { return 'LONGTEXT'; },\n      peg$c524 = \"bigint\",\n      peg$c525 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c526 = function() { return 'BIGINT'; },\n      peg$c527 = \"float64\",\n      peg$c528 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c529 = function() { return 'FLOAT64'; },\n      peg$c530 = \"double\",\n      peg$c531 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c532 = function() { return 'DOUBLE'; },\n      peg$c533 = \"date\",\n      peg$c534 = peg$literalExpectation(\"DATE\", true),\n      peg$c535 = function() { return 'DATE'; },\n      peg$c536 = \"datetime\",\n      peg$c537 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c538 = function() { return 'DATETIME'; },\n      peg$c539 = \"time\",\n      peg$c540 = peg$literalExpectation(\"TIME\", true),\n      peg$c541 = function() { return 'TIME'; },\n      peg$c542 = \"timestamp\",\n      peg$c543 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c544 = function() { return 'TIMESTAMP'; },\n      peg$c545 = \"truncate\",\n      peg$c546 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c547 = function() { return 'TRUNCATE'; },\n      peg$c548 = \"user\",\n      peg$c549 = peg$literalExpectation(\"USER\", true),\n      peg$c550 = function() { return 'USER'; },\n      peg$c551 = \"current_date\",\n      peg$c552 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c553 = function() { return 'CURRENT_DATE'; },\n      peg$c554 = \"adddate\",\n      peg$c555 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c556 = function() { return 'ADDDATE'; },\n      peg$c557 = \"interval\",\n      peg$c558 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c559 = function() { return 'INTERVAL'; },\n      peg$c560 = function() { return 'YEAR'; },\n      peg$c561 = function() { return 'MONTH'; },\n      peg$c562 = function() { return 'DAY'; },\n      peg$c563 = function() { return 'HOUR'; },\n      peg$c564 = function() { return 'MINUTE'; },\n      peg$c565 = function() { return 'SECOND'; },\n      peg$c566 = \"current_time\",\n      peg$c567 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c568 = function() { return 'CURRENT_TIME'; },\n      peg$c569 = \"current_timestamp\",\n      peg$c570 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c571 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c572 = \"global\",\n      peg$c573 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c574 = function() { return 'GLOBAL'; },\n      peg$c575 = \"session\",\n      peg$c576 = peg$literalExpectation(\"SESSION\", true),\n      peg$c577 = function() { return 'SESSION'; },\n      peg$c578 = \"local\",\n      peg$c579 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c580 = function() { return 'LOCAL'; },\n      peg$c581 = \"persist\",\n      peg$c582 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c583 = function() { return 'PERSIST'; },\n      peg$c584 = \"persist_only\",\n      peg$c585 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c586 = function() { return 'PERSIST_ONLY'; },\n      peg$c587 = \"add\",\n      peg$c588 = peg$literalExpectation(\"ADD\", true),\n      peg$c589 = function() { return 'ADD'; },\n      peg$c590 = \"column\",\n      peg$c591 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c592 = function() { return 'COLUMN'; },\n      peg$c593 = \"index\",\n      peg$c594 = peg$literalExpectation(\"INDEX\", true),\n      peg$c595 = function() { return 'INDEX'; },\n      peg$c596 = \"key\",\n      peg$c597 = peg$literalExpectation(\"KEY\", true),\n      peg$c598 = function() { return 'KEY'; },\n      peg$c599 = \"fulltext\",\n      peg$c600 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c601 = function() { return 'FULLTEXT'; },\n      peg$c602 = \"unique\",\n      peg$c603 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c604 = function() { return 'UNIQUE'; },\n      peg$c605 = \"comment\",\n      peg$c606 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c607 = function() { return 'COMMENT'; },\n      peg$c608 = \"constraint\",\n      peg$c609 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c610 = function() { return 'CONSTRAINT'; },\n      peg$c611 = \"references\",\n      peg$c612 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c613 = function() { return 'REFERENCES'; },\n      peg$c614 = \",\",\n      peg$c615 = peg$literalExpectation(\",\", false),\n      peg$c616 = \"[\",\n      peg$c617 = peg$literalExpectation(\"[\", false),\n      peg$c618 = \"]\",\n      peg$c619 = peg$literalExpectation(\"]\", false),\n      peg$c620 = \";\",\n      peg$c621 = peg$literalExpectation(\";\", false),\n      peg$c622 = \"||\",\n      peg$c623 = peg$literalExpectation(\"||\", false),\n      peg$c624 = \"&&\",\n      peg$c625 = peg$literalExpectation(\"&&\", false),\n      peg$c626 = \"/*\",\n      peg$c627 = peg$literalExpectation(\"/*\", false),\n      peg$c628 = \"*/\",\n      peg$c629 = peg$literalExpectation(\"*/\", false),\n      peg$c630 = \"--\",\n      peg$c631 = peg$literalExpectation(\"--\", false),\n      peg$c632 = \"#\",\n      peg$c633 = peg$literalExpectation(\"#\", false),\n      peg$c634 = peg$anyExpectation(),\n      peg$c635 = /^[ \\t\\n\\r]/,\n      peg$c636 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c637 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c638 = function(n) {\n            return n\n          },\n      peg$c639 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c640 = function(t) { return { dataType: t }; },\n      peg$c641 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsewindow_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_alias();\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c38(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c39) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c41(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c42(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c45(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c46(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c46(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c47(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c48(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c49(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c51(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c52();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c54();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_INNER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_CROSS();\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c55(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c57(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c59(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c62(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c63(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c64(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c65) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c66); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c67) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c68); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c70); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c71) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c73) {\n                            s12 = peg$c73;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c75();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c76) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c70); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c78) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c80(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c81(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c42(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseor_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c86(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c87(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c90(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_or_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_or_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_or_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_or_expr() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c92(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c93(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c95;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c96); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c97;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c98); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c100(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c101(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c104) {\n      s0 = peg$c104;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c106;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c107); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c108) {\n          s0 = peg$c108;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c109); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c110) {\n            s0 = peg$c110;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c111); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c112;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c97;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c114) {\n                  s0 = peg$c114;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c117(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c118(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c119(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c120(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c121(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c122;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c124;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c126(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c129;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c131;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseinterval_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecolumn_ref();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseparam();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseLPAREN();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse__();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseexpr();\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse__();\n                        if (s4 !== peg$FAILED) {\n                          s5 = peg$parseRPAREN();\n                          if (s5 !== peg$FAILED) {\n                            s6 = [];\n                            s7 = peg$currPos;\n                            s8 = peg$parse___();\n                            if (s8 !== peg$FAILED) {\n                              s9 = peg$parseKW_AND();\n                              if (s9 === peg$FAILED) {\n                                s9 = peg$parseKW_OR();\n                              }\n                              if (s9 !== peg$FAILED) {\n                                s10 = peg$parse__();\n                                if (s10 !== peg$FAILED) {\n                                  s11 = peg$parseor_expr();\n                                  if (s11 !== peg$FAILED) {\n                                    s8 = [s8, s9, s10, s11];\n                                    s7 = s8;\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                            while (s7 !== peg$FAILED) {\n                              s6.push(s7);\n                              s7 = peg$currPos;\n                              s8 = peg$parse___();\n                              if (s8 !== peg$FAILED) {\n                                s9 = peg$parseKW_AND();\n                                if (s9 === peg$FAILED) {\n                                  s9 = peg$parseKW_OR();\n                                }\n                                if (s9 !== peg$FAILED) {\n                                  s10 = peg$parse__();\n                                  if (s10 !== peg$FAILED) {\n                                    s11 = peg$parseor_expr();\n                                    if (s11 !== peg$FAILED) {\n                                      s8 = [s8, s9, s10, s11];\n                                      s7 = s8;\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                            }\n                            if (s6 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c133(s3, s6);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseexpr_list();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c134(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c135(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c136(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c137(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c138(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c140(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c141;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c142); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c143.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c144); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c143.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c144); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c141;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c142); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c145(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c146;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c148.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c149); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c148.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c146;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c147); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c145(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c150;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c152.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c153); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c152.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c150;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c145(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c154(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c138(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c155(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c156(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c156(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c157.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c159.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c160); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c161.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c163;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c165(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c166(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c167(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c168(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c169(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c170(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c171(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c127;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c172();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c173(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr_list();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c173(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseextract_func();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c174(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c175) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c177) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c178); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c179) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c180); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c181) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c182); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c183) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c184); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c185) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c186); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c188); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c189) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c190); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c191) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c192); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c193) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c194); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c195) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c196); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c197) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c198); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c201) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c203) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c204); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c205) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c207) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c209) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c211) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c213) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c215) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c217();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c218(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c219(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c220(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c221(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c222(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c223();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c224();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c225();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c226();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c227) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c146;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c147); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c146;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c229(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c227) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c228); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c141;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c142); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c141;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c142); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c229(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c146;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c147); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c146;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c147); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c230(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CURRENT_TIMESTAMP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c231(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 27).toLowerCase() === peg$c232) {\n                      s8 = input.substr(peg$currPos, 27);\n                      peg$currPos += 27;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c233); }\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c234(s1, s3, s5, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c235.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c237.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c239) {\n      s1 = peg$c239;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c240); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c241();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c242) {\n        s1 = peg$c242;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c243); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c244();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c245) {\n          s1 = peg$c245;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c246); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c247();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c248) {\n            s1 = peg$c248;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c249); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c250();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c251) {\n              s1 = peg$c251;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c252); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c253();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c254) {\n                s1 = peg$c254;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c255); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c256();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c257) {\n                  s1 = peg$c257;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c258); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c259();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c260) {\n                    s1 = peg$c260;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c261); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c262();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c263) {\n                      s1 = peg$c263;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c264); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c265();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c266) {\n                        s1 = peg$c266;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c267); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c268(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c269;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c270); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c247();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c271.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c272); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c273(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c274(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c275(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c276(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c277(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c124;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c122;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c123); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c278(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c124;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c122;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c279(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c280;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c282(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c283(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c284(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c285.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c286); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c287.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c289.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c290); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c291.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c292); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c293(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c294) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c295); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c296) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c297); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c298) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c300) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c301); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c302) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c303); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c304) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c305); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c306) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c307); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c308();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c309) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c311) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c313) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c314); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c315) {\n      s1 = peg$c315;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c316); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c317) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c318); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c319) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c320); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c321) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c322); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c323();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c330) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c331); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c332) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c333); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c334) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c335); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c336();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c339();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c340) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c341); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c342();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c343) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c344); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c345) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c346); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c349) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c351) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c352); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c353) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c354); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c357) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c359) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c360); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c365();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c366) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c367); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c368) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c369); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c372) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c373); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c374) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c375); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c376) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c377); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c378) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c379); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c380) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c381); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c382) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c383); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c388();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c389) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c390); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c391();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c392) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c394();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c395) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c397();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c398) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c399); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c400();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c401) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c402); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c403();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c404) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c405); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c406();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c407) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c408); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c409();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c410) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c412();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c413) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c414); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c415();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c416) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c418();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c419) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c420); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c421();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c422) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c423); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c425) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c426); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c427();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c428) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c429); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c430();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c431) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c432); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c433();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c434) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c435); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c436();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c437) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c438); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c439();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c440) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c441); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c442();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c443) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c444); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c445();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c446) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c447); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c448) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c452) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c454) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c455); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c460();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c464) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c465); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c467) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c469();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c470) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c471); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c472();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c473) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c474); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c475();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c476) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c477); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c478();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c479) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c480); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c481();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c482) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c483); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c484();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c485) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c486); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c487();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c488) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c490();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c491) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c492); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c493();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c494) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c495); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c496();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c497) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c498); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c499();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c503) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c504); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c505();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c506) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c507); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c508();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c509) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c510); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c511();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c512) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c513); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c514();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c515) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c516); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c517();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c520();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c521) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c523();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c524) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c525); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c526();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c527) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c528); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c529();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c530) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c531); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c532();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c533) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c534); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c535();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c536) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c537); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c538();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c539) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c541();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c542) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c544();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c545) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c546); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c547();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c548) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c550();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c551) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c552); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c553();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c554) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c555); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c556();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c557) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c558); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c559();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c215) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c216); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c201) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c202); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c561();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c177) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c178); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c562();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c187) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c564();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c205) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c206); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c565();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c566) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c567); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c568();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c569) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c570); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c571();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c575) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c577();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c580();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c581) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c583();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c584) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c585); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c586();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c587) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c588); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c589();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c590) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c592();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c593) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c594); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c595();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c596) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c598();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c599) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c600); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c601();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c602) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c607();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c608) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c609); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c610();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c613();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c280;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c614;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c112;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c106;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c616;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c617); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c618;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c620;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c622) {\n      s0 = peg$c622;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c623); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c624) {\n      s0 = peg$c624;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c626) {\n      s1 = peg$c626;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c628) {\n        s5 = peg$c628;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c629); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c628) {\n          s5 = peg$c628;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c629); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c628) {\n          s3 = peg$c628;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c629); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c630) {\n      s1 = peg$c630;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c632;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c635.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c271.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c272); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c271.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c272); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c634); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c637(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c638(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c639(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c640(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c641(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c641(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (fnName) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { target, expr: expression, symbol, as: alias } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  if (!args) return name\n  const { parentheses, over } = expr\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  const overStr = overToSQL(over)\n  return [parentheses ? `(${str})` : str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\nimport { exprToSQL } from './expr'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr } = tableInfo\n  const database = identifierToSql(db)\n  const tableName = table ? identifierToSql(table) : exprToSQL(expr)\n  const str = database ? `${database}.${tableName}` : tableName\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, table, parentheses, property,\n  } = expr\n  let str = column === '*' ? '*' : identifierToSql(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale } = definition || {}\n  let result = dataType\n  if (length) {\n    result += `(${[length, scale].filter(hasVal).join(', ')})`\n  }\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (column.as.match(/^[a-z_][0-9a-z_]*$/i)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, value } = opt\n  result.push(type.toUpperCase())\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'time':\n    case 'date':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnDefinitionToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  const {\n    action, create_definitions: createDefinition, if_not_exists: ifNotExists,keyword, resource, symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    default:\n      break\n  }\n  const alterArray = [toUpper(action), toUpper(keyword), toUpper(ifNotExists), name, dataType.filter(hasVal).join(' ')]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${name}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  extract     : extractFunToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(expr) {\n  const str = `${expr.operator} ${exprToSQL(expr.expr)}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) str = `DISTINCT ${str}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  return [`${fnName}(${str})`, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns,\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL, toUpper } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value, keyword } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    if (keyword) setItem[2] = `${toUpper(keyword)}(${val})`\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = ['INSERT', toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  commonCmdToSQL,\n  declareToSQL,\n  renameToSQL,\n  useToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { createToSQL } from './create'\nimport { alterToSQL } from './alter'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  commonCmdToSQL,\n  declareToSQL,\n  useToSQL,\n  renameToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}