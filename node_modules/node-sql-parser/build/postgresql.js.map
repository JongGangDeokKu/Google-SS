{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/postgresql.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c4","peg$literalExpectation","peg$c6","peg$c8","peg$c16","peg$c19","peg$c20","k","resource","prefix","toLowerCase","peg$c22","peg$c25","peg$c28","peg$c31","peg$c33","peg$c36","peg$c38","peg$c45","peg$c47","peg$c49","peg$c55","peg$c57","peg$c59","peg$c61","peg$c67","peg$c69","peg$c71","peg$c73","peg$c76","peg$c78","peg$c80","peg$c95","peg$c97","peg$c99","peg$c101","peg$c104","peg$c106","peg$c108","peg$c114","peg$c118","peg$c121","peg$c123","peg$c125","peg$c128","peg$c130","peg$c133","peg$c135","peg$c137","peg$c139","peg$c141","peg$c144","peg$c146","peg$c148","peg$c150","peg$c152","peg$c154","peg$c156","peg$c160","peg$c164","peg$c166","peg$c168","peg$c170","peg$c173","peg$c175","peg$c177","peg$c179","peg$c184","peg$c186","peg$c189","peg$c191","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c205","peg$c208","peg$c210","peg$c212","peg$c214","peg$c217","peg$c223","peg$c225","peg$c227","peg$c229","peg$c231","peg$c233","peg$c235","peg$c237","peg$c239","peg$c242","peg$c246","peg$c248","peg$c253","head","tail","createList","peg$c268","peg$c270","peg$c272","peg$c274","peg$c281","peg$c283","peg$c286","peg$c288","peg$c290","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c316","peg$c319","peg$c322","peg$c325","peg$c336","peg$c360","createBinaryExprChain","peg$c362","peg$c369","peg$c371","peg$c373","peg$c375","peg$c377","peg$c379","peg$c391","peg$c393","peg$c395","peg$c397","peg$c399","peg$c401","peg$c404","peg$c406","peg$c409","peg$c411","peg$c413","peg$c417","peg$c423","reservedMap","peg$c429","peg$c430","peg$c431","peg$classExpectation","peg$c432","chars","peg$c433","peg$c434","peg$c436","peg$c437","peg$c438","peg$c442","peg$c443","peg$c444","peg$c445","peg$c446","peg$c447","peg$c449","peg$c452","peg$c459","peg$c461","peg$c463","peg$c465","peg$c467","peg$c469","peg$c471","peg$c473","peg$c475","peg$c477","peg$c489","peg$c491","peg$c493","peg$c495","peg$c497","peg$c499","peg$c501","peg$c503","peg$c505","peg$c507","peg$c509","peg$c511","peg$c513","peg$c515","peg$c517","peg$c519","peg$c521","peg$c523","peg$c525","peg$c527","peg$c529","peg$c548","peg$c550","peg$c551","peg$c552","peg$c553","peg$c555","peg$c558","peg$c561","peg$c564","peg$c567","peg$c570","peg$c573","peg$c576","peg$c579","peg$c582","peg$c585","peg$c586","peg$c587","peg$c596","peg$c600","peg$c601","peg$c602","peg$c603","peg$c604","peg$c605","peg$c606","peg$c607","peg$c610","peg$c612","peg$c614","peg$c616","peg$c618","peg$c622","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c635","peg$c638","peg$c641","peg$c643","peg$c645","peg$c647","peg$c649","peg$c651","peg$c654","peg$c658","peg$c661","peg$c663","peg$c665","peg$c667","peg$c670","peg$c673","peg$c676","peg$c679","peg$c683","peg$c685","peg$c687","peg$c689","peg$c691","peg$c693","peg$c695","peg$c697","peg$c699","peg$c701","peg$c703","peg$c705","peg$c707","peg$c709","peg$c711","peg$c713","peg$c716","peg$c719","peg$c722","peg$c725","peg$c728","peg$c732","peg$c735","peg$c738","peg$c741","peg$c745","peg$c748","peg$c751","peg$c754","peg$c757","peg$c760","peg$c763","peg$c766","peg$c769","peg$c772","peg$c775","peg$c778","peg$c780","peg$c782","peg$c784","peg$c786","peg$c788","peg$c790","peg$c793","peg$c796","peg$c799","peg$c802","peg$c805","peg$c808","peg$c811","peg$c814","peg$c817","peg$c820","peg$c823","peg$c826","peg$c829","peg$c832","peg$c835","peg$c838","peg$c841","peg$c844","peg$c847","peg$c850","peg$c853","peg$c856","peg$c859","peg$c862","peg$c865","peg$c868","peg$c871","peg$c874","peg$c877","peg$c880","peg$c883","peg$c889","peg$c898","peg$c901","peg$c904","peg$c907","peg$c910","peg$c913","peg$c916","peg$c919","peg$c922","peg$c925","peg$c928","peg$c930","peg$c932","peg$c934","peg$c936","peg$c938","peg$c940","peg$c943","peg$c946","peg$c950","peg$c953","peg$c958","peg$c961","peg$c964","peg$c967","peg$c970","peg$c972","peg$c974","peg$c976","peg$c978","peg$c980","peg$c982","peg$c984","peg$c986","peg$c988","peg$c990","peg$c992","peg$c994","peg$c996","peg$c998","peg$c1000","peg$c1002","peg$c1004","peg$c1006","peg$c1010","peg$c1011","peg$c1012","peg$c1030","dataType","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsecrud_stmt","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parsetable_ref_list","a","tt","db","keyword","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","op","peg$c85","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseKW_IF_NOT_EXISTS","s8","peg$parseLPAREN","peg$parsecreate_definition","peg$parseCOMMA","peg$parseRPAREN","peg$parsecreate_table_definition","peg$parsetable_option","peg$parsetable_options","substr","peg$parseident_start","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","ife","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","e","parentheses","lt","like","peg$c13","peg$parsecreate_table_stmt","s18","s20","s21","s23","s25","s27","s29","peg$parseKW_CONSTRAINT","peg$parseident_name","peg$parsetrigger_event","peg$parseKW_OR","peg$parsetrigger_event_list","peg$parseKW_FROM","args","kw","peg$parsetrigger_deferrable","ob","peg$parsetrigger_for_row","peg$parseKW_WHEN","peg$parseexpr","cond","peg$parsetrigger_when","peg$parseproc_func_call","kc","te","tn","fr","de","fe","tw","fct","constraint","events","deferrable","for_each","when","execute","expr","constraint_type","constraint_kw","peg$parsecreate_constraint_trigger","s12","s14","s16","peg$parseliteral_string","peg$parseKW_WITH","w","v","f","extension","commonStrToLiteral","with","schema","version","peg$c9","peg$parsecreate_extension_stmt","s24","s26","s28","s30","peg$parseKW_UNIQUE","peg$parseKW_CONCURRENTLY","peg$parseident","peg$parseindex_type","peg$parsecolumn_order","peg$parsecolumn_order_list","peg$parseindex_option","peg$parseindex_options_list","peg$parseKW_TABLESPACE","peg$parsewhere_clause","co","on","ta","um","cols","wr","ts","index_type","concurrently","index","on_kw","index_using","index_columns","with_before_where","tablespace","where","peg$parsecreate_index_stmt","peg$parseKW_TEMP","peg$parseKW_SEQUENCE","peg$parsealias_ident","peg$parsecreate_sequence_definition","peg$parsecreate_sequence_definition_list","sequence","peg$parsecreate_sequence","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","database","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parselock_mode","lm","nw","tables","map","lock_mode","nowait","peg$parselock_stmt","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","peg$parsereturning_stmt","set","returning","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parsecolumn","peg$parsecolumn_list","peg$parseinsert_value_clause","ri","values","partition","peg$c342","peg$parsereplace_insert_stmt","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","info","addition","peg$c333","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseselect_stmt","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseorder_by_clause","peg$parselimit_clause","_next","union","_orderby","_limit","peg$c2","peg$parseKW_BY","peg$parseliteral_numeric","peg$parsesequence_definition_increment","peg$parsesequence_definition_minval","peg$parsesequence_definition_maxval","peg$parsesequence_definition_start","peg$parsesequence_definition_cache","peg$parsesequence_definition_cycle","peg$parsesequence_definition_owned","s10","nf","peg$parsecollate_expr","peg$parseKW_ASC","peg$parseKW_DESC","collate","opclass","order","nulls","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parseconstraint_name","peg$parsecte_column_definition","peg$parseindex_options","id","definition","index_options","peg$parsecreate_constraint_primary","peg$parseKW_KEY","u","peg$parsecreate_constraint_unique","peg$parsereference_definition","reference_definition","peg$parsecreate_constraint_foreign","peg$parsecreate_constraint_definition","clc","ca","cf","re","peg$parsedata_type","peg$parseliteral_not_null","peg$parseliteral_null","peg$parsedefault_expr","df","default_val","nullable","peg$c64","peg$parsecolumn_constraint","peg$parsekeyword_comment","peg$c74","peg$parsecolumn_format","peg$parsestorage","auto_increment","unique_or_primary","isArray","comment","column_format","storage","peg$parseKW_COLLATE","peg$parseKW_DEFAULT","peg$parseliteral","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","action","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","peg$parseALTER_RENAME_TABLE","peg$parseKW_ASSIGIN_EQUAL","symbol","algorithm","lock","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_delete","on_update","ro","peg$parsereference_option","peg$parseKW_INSERT","peg$parsecolumn_ref_list","peg$c161","peg$parsecreate_option_character_set_kw","peg$parseKW_COMMENT","peg$c206","peg$c215","peg$c218","peg$parseselect_stmt_nake","parentheses_symbol","peg$parsewith_clause","cte","peg$parsecte_definition","peg$parseKW_RECURSIVE","recursive","stmt","s22","peg$parseKW_SELECT","peg$parse___","peg$parsequery_option","opts","peg$c255","peg$parseoption_clause","peg$parseKW_DISTINCT","peg$parsecolumn_clause","peg$parseKW_GROUP","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","g","h","distinct","groupby","having","orderby","limit","peg$c254","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c258","tbl","peg$parseKW_DOUBLE_COLON","peg$parsealias_clause","target","peg$parseDOT","alias","peg$c261","peg$parseKW_USING","result","peg$c277","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c279","peg$c289","peg$parsetable_base","peg$parsetable_ref","peg$parsejoin_op","using","peg$parseon_clause","peg$c294","peg$c295","peg$parsetable_join","peg$parseKW_DUAL","peg$c298","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","obj","peg$c303","peg$c305","peg$parsevar_decl","peg$parseKW_WHERE","peg$parseparentheses_or_expr","peg$parseKW_AND","peg$parseor_and_where_expr","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parseKW_BETWEEN","peg$c314","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$c330","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","i1","res","seperator","peg$c331","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c338","peg$parseKW_RETURNING","peg$parsevalue_item","peg$parsevalue_list","peg$parsevalue_clause","el","peg$c349","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$c351","peg$parsecase_expr","condition_list","otherwise","peg$parseKW_CASE","peg$parsecase_when_then","peg$parseKW_ELSE","peg$parsecase_else","peg$parseKW_END","peg$parseKW_THEN","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parseor_expr","rt","lf","peg$c358","peg$parseand_expr","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","nk","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c389","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","pop","tableName","peg$c381","peg$c382","peg$parseis_op_right","peg$parseKW_ILIKE","peg$parselike_op","peg$parselike_op_right","peg$parseOPERATOR_CONCATENATION","peg$parseDOUBLE_WELL_ARROW","peg$parseWELL_ARROW","peg$parsejsonb_op_right","peg$parsecomparison_op_right","createBinaryExpr","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseaggr_func","peg$parsewindow_func","peg$parsefunc_call","peg$parseKW_CAST","peg$c533","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c534","scale","peg$c535","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c536","peg$parsecast_expr","peg$parseDOUBLE_ARROW","peg$parseSINGLE_ARROW","arrow","peg$c420","peg$c421","peg$parsequoted_ident","JSON","stringify","peg$c425","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parsecolumn_name","peg$parseident_part","peg$parseover_partition","as_window_specification","peg$parseKW_COUNT","peg$parsestar_expr","peg$parsedistinct_args","peg$parsecount_arg","over","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseKW_ARRAY_AGG","peg$parseaggr_array_agg","peg$parseKW_WIN_FNS_RANK","peg$parsewindow_fun_rank","peg$parseKW_LAG_LEAD","peg$parseconsider_nulls_clause","consider_nulls","peg$parsewindow_fun_laglead","peg$parseKW_FIRST_LAST_VALUE","peg$parsewindow_fun_firstlast","peg$c482","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parsescalar_func","bc","peg$c487","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_TIME","peg$parseKW_DATE","field","cast_type","source","peg$c531","peg$parseextract_func","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","peg$parsesingle_char","peg$c546","up","peg$c549","peg$parseliteral_datetime","peg$parseKW_ARRAY","peg$parseLBRAKE","peg$parseRBRAKE","expr_list","brackets","peg$parseliteral_array","peg$parseKW_NULL","peg$parseKW_NOT_NULL","peg$parsesingle_quote_char","peg$c544","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c590","exp","peg$c591","peg$c592","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_DOUBLE","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR__PRE_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseproc_primary_list","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1019","peg$c1021","peg$c1026","peg$parsemem_chain","members","peg$c1029","peg$parsecharacter_string_type","peg$parsenumeric_type_suffix","suffix","peg$c1033","peg$c1034","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_JSON","peg$parseKW_JSONB","peg$parsejson_type","peg$parseKW_GEOMETRY","peg$parsegeometry_type","peg$c1038","peg$parsetext_type","peg$parseKW_UUID","peg$parseuuid_type","peg$parseKW_BOOL","peg$parseKW_BOOLEAN","peg$parseboolean_type","peg$parseKW_ZEROFILL","un","ze","peg$c1031","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","keys","columnInfo","split","strOrLiteral","require","PARSER_NAME","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","literalToSQL","shift","commentToSQL","toUpper","onPartitionsToSQL","filter","hasVal","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","indexOptions","definitionSQL","exprToSQL","identifierToSql","constraintDefinitionToSQL","constraintDefinition","referenceDefinition","constraintSQL","columnReferenceDefinitionToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","overToSQL","windowSQL","castToSQL","expression","str","symbolChar","funcToSQL","overStr","tableToSQL","tablesToSQL","unnestExpr","withOffset","with_offset","commonOptionConnector","unnestToSQL","baseTable","clauses","joinExpr","tableOptionToSQL","tableOption","sql","columnRefToSQL","isDual","commonTypeValue","columnDataType","reference","onDelete","onUpdate","columnOrderToSQL","columnOrder","columnDefinitionToSQL","columnDefinition","columnOpt","check","defaultOpt","autoIncrement","uniquePrimary","columnFormat","autoIncreatementToSQL","columnOption","columnsToSQL","getDual","exprList","star","columnsStr","columnIdentifierToSql","columnToSQL","DEFAULT_OPT","parserOpt","opt","connector","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","ident","val","replaceParams","params","replaceParamsInner","partitions","arrayStructTypeToSQL","anglebracket","dataTypeUpper","field_name","field_type","triggerEventToSQL","event","kwArgs","returningToSQL","commonKeywordArgsToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","alterExprToSQL","createDefinition","ifNotExists","createDefinitionToSQL","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","withExprStr","selectToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","top","windowInfo","window","withInfo","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","arrayStructValueToSQL","arrayPath","array_path","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","aggr_func","fnName","window_func","argsList","isConsidernulls","isConsiderNullsInArgs","constructArgsList","assign","leftVar","rightVal","extract","castType","binary_expr","rstr","isBetween","case","conditions","len","cast","column_ref","function","interval","intervalExpr","show","struct","namedWindowExprInfo","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexSQL","setToSQL","sets","setItem","valuesToSQL","partitionToSQL","partitionArr","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lockInfo","pgLock","varName","select","unionToSQL","unary_expr","typeToSQLFn","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createTableToSQL","constraintKw","createTriggerToSQL","withName","createExtensionToSQL","fileStream","filestream_on","include","indexColumns","indexUsing","onKw","withBeforeWhere","withIndexOpt","includeColumns","createIndexToSQL","createSequenceToSQL","createDatabaseToSQL","delete","update","insert","onDuplicateUpdate","on_duplicate_update","duplicateSet","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","unlock","fun","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","Parser","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"postgresql.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          // => multiple_stmt | cmd_stmt | crud_stmt\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            /*\n            // is in reality: { tableList: any[]; columnList: any[]; ast: T; }\n            export type AstStatement<T> = T;\n             => AstStatement<crud_stmt[]> */\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n            \tast: cur\n            }\n          },\n      peg$c2 = function(head, tail, ob, l) {\n           /* export interface union_stmt_node extends select_stmt_node  {\n               _next: union_stmt_node;\n               union: 'union' | 'union all';\n            }\n           => AstStatement<union_stmt_node>\n           */\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][5]\n              cur.union = tail[i][3] ? 'union all' : 'union'\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c3 = \"extension\",\n      peg$c4 = peg$literalExpectation(\"EXTENSION\", true),\n      peg$c5 = \"schema\",\n      peg$c6 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c7 = \"version\",\n      peg$c8 = peg$literalExpectation(\"VERSION\", true),\n      peg$c9 = function(a, e, ife, n, w, s, v, f) {\n            /*\n             export type nameOrLiteral = literal_string | { type: 'same', value: string; };\n            => {\n                type: 'create';\n                keyword: 'extension';\n                if_not_exists?: 'if not exists';\n                extension: nameOrLiteral;\n                with: 'with';\n                schema: nameOrLiteral;\n                version: nameOrLiteral;\n                from: nameOrLiteral;\n              }\n            */\n            return {\n              type: 'create',\n              keyword: e.toLowerCase(),\n              if_not_exists: ife && ife[0].toLowerCase(),\n              extension: commonStrToLiteral(n),\n              with: w && w[0].toLowerCase(),\n              schema: commonStrToLiteral(s && s[2].toLowerCase()), // <== wont that be a bug ?\n              version: commonStrToLiteral(v && v[2]),\n              from: commonStrToLiteral(f && f[2]),\n            }\n          },\n      peg$c10 = function(head, tail) {\n          // => create_option_character_set[]\n          return createList(head, tail, 1)\n        },\n      peg$c11 = function(a, k, ife, t, c) {\n            /*\n            export type create_db_stmt = {\n              type: 'create',\n              keyword: 'database',\n              if_not_exists?: 'if not exists',\n              database: string,\n              create_definition?: create_db_definition\n            }\n            => AstStatement<create_db_stmt>\n            */\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists: ife && ife[0].toLowerCase(),\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c12 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            /*\n            export type create_table_stmt_node = create_table_stmt_node_simple | create_table_stmt_node_like;\n            export interface create_table_stmt_node_base {\n              type: 'create';\n              keyword: 'table';\n              temporary?: 'temporary';\n              if_not_exists?: 'if not exists';\n              table: table_ref_list;\n            }\n            export interface create_table_stmt_node_simple extends create_table_stmt_node_base{\n              ignore_replace?: 'ignore' | 'replace';\n              as?: 'as';\n              query_expr?: union_stmt_node;\n              create_definition?: create_table_definition;\n              table_options?: table_options;\n            }\n            => AstStatement<create_table_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c13 = function(a, tp, ife, t, lt) {\n            /*\n\n            export interface create_table_stmt_node_like extends create_table_stmt_node_base{\n              like: create_like_table;\n            }\n            => AstStatement<create_table_stmt_node>;\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c14 = function(a, tp, ife, t, as, c) {\n            /*\n            export type create_sequence_stmt = {\n              type: 'create',\n              keyword: 'sequence',\n              temporary?: 'temporary' | 'temp',\n              if_not_exists?: 'if not exists',\n              table: table_ref_list,\n              create_definition?: create_sequence_definition_list\n            }\n            => AstStatement<create_sequence_stmt>\n            */\n            t.as = as && as[2]\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'sequence',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                sequence: [t],\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c15 = \"increment\",\n      peg$c16 = peg$literalExpectation(\"INCREMENT\", true),\n      peg$c17 = function(k, b, n) {\n          /*\n          export type sequence_definition = { \"resource\": \"sequence\", prefix?: string,value: literal | column_ref }\n          => sequence_definition\n          */\n          return {\n            resource: 'sequence',\n            prefix: b ? `${k.toLowerCase()} by` : k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c18 = \"minvalue\",\n      peg$c19 = peg$literalExpectation(\"MINVALUE\", true),\n      peg$c20 = function(k, n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c21 = \"no\",\n      peg$c22 = peg$literalExpectation(\"NO\", true),\n      peg$c23 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: 'no minvalue'\n            }\n          }\n        },\n      peg$c24 = \"maxvalue\",\n      peg$c25 = peg$literalExpectation(\"MAXVALUE\", true),\n      peg$c26 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: 'no maxvalue'\n            }\n          }\n        },\n      peg$c27 = \"start\",\n      peg$c28 = peg$literalExpectation(\"START\", true),\n      peg$c29 = function(k, w, n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: w ? `${k.toLowerCase()} with` : k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c30 = \"cache\",\n      peg$c31 = peg$literalExpectation(\"CACHE\", true),\n      peg$c32 = \"cycle\",\n      peg$c33 = peg$literalExpectation(\"CYCLE\", true),\n      peg$c34 = function(n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: n ? 'no cycle' : 'cycle'\n            }\n          }\n        },\n      peg$c35 = \"owned\",\n      peg$c36 = peg$literalExpectation(\"OWNED\", true),\n      peg$c37 = \"none\",\n      peg$c38 = peg$literalExpectation(\"NONE\", true),\n      peg$c39 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: 'owned by',\n            value: {\n              type: 'origin',\n              value: 'none'\n            }\n          }\n        },\n      peg$c40 = function(n, col) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: 'owned by',\n            value: col\n          }\n        },\n      peg$c41 = function(head, tail) {\n          // => create_sequence_definition[]\n          return createList(head, tail, 1)\n      },\n      peg$c42 = function(a, kw, t, co, n, on, ta, um, cols, wr, ts, w) {\n          /*\n          export interface create_index_stmt_node {\n            type: 'create';\n            index_type?: 'unique';\n            keyword: 'index';\n            concurrently?: 'concurrently';\n            index: string;\n            on_kw: string;\n            table: table_name;\n            index_using?: index_type;\n            index_columns: column_order[];\n            with?: index_option[];\n            with_before_where: true;\n            tablespace?: {type: 'origin'; value: string; }\n            where?: where_clause;\n          }\n          => AstStatement<create_index_stmt_node>\n          */\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                concurrently: co && co.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_using: um,\n                index_columns: cols,\n                with: wr && wr[4],\n                with_before_where: true,\n                tablespace: ts && { type: 'origin', value: ts[2] },\n                where: w,\n              }\n          }\n        },\n      peg$c43 = function(head, tail) {\n          // => column_order[]\n          return createList(head, tail)\n        },\n      peg$c44 = \"nulls\",\n      peg$c45 = peg$literalExpectation(\"NULLS\", true),\n      peg$c46 = \"first\",\n      peg$c47 = peg$literalExpectation(\"FIRST\", true),\n      peg$c48 = \"last\",\n      peg$c49 = peg$literalExpectation(\"LAST\", true),\n      peg$c50 = function(c, ca, op, o, nf) {\n          /*\n          => {\n            column: expr;\n            collate: collate_expr;\n            opclass: ident;\n            order: 'asc' | 'desc';\n            nulls: 'nulls last' | 'nulls first';\n          }\n          */\n          return {\n            column: c,\n            collate: ca,\n            opclass: op,\n            order: o && o.toLowerCase() || 'asc',\n            nulls: nf && `${nf[0].toLowerCase()} ${nf[2].toLowerCase()}`,\n          }\n        },\n      peg$c51 = function(t) {\n          // => { type: 'like'; table: table_ref_list; }\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c52 = function(e) {\n           // => create_like_table_simple & { parentheses?: boolean; }\n            e.parentheses = true;\n            return e;\n        },\n      peg$c53 = function(head, tail) {\n            // => create_definition[]\n            return createList(head, tail);\n          },\n      peg$c54 = \"auto_increment\",\n      peg$c55 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c56 = \"unique\",\n      peg$c57 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c58 = \"primary\",\n      peg$c59 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c60 = \"key\",\n      peg$c61 = peg$literalExpectation(\"KEY\", true),\n      peg$c62 = function(c, d, clc, a, u, co, ca, cf, s, re) {\n            /*\n            => {\n              column: column_ref;\n              definition: data_type;\n              nullable: column_constraint['nullable'];\n              default_val: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n              resource: 'column';\n            }\n            */\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              nullable: clc && clc.nullable,\n              default_val: clc && clc.default_val,\n              auto_increment: a && a.toLowerCase(),\n              unique_or_primary: Array.isArray(u) ? `${u[0].toLowerCase()} ${u[2].toLowerCase()}` : u,\n              comment: co,\n              collate: ca,\n              column_format: cf,\n              storage:s,\n              reference_definition: re,\n              resource: 'column'\n            }\n          },\n      peg$c63 = function(n, df) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c64 = function(df, n) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c65 = function(ca) {\n          // => { type: 'collate'; value: ident; }\n          return {\n            type: 'collate',\n            value: ca,\n          }\n        },\n      peg$c66 = \"column_format\",\n      peg$c67 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c68 = \"fixed\",\n      peg$c69 = peg$literalExpectation(\"FIXED\", true),\n      peg$c70 = \"dynamic\",\n      peg$c71 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c72 = \"default\",\n      peg$c73 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c74 = function(k, f) {\n          // => { type: 'column_format'; value: 'fixed' | 'dynamic' | 'default'; }\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c75 = \"storage\",\n      peg$c76 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c77 = \"disk\",\n      peg$c78 = peg$literalExpectation(\"DISK\", true),\n      peg$c79 = \"memory\",\n      peg$c80 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c81 = function(k, s) {\n          // => { type: 'storage'; value: 'disk' | 'memory' }\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c82 = function(ce) {\n          // => { type: 'default'; value: literal | expr; }\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c83 = function(head, tail) {\n          // => (ALTER_ALGORITHM | ALTER_LOCK)[]\n          return createList(head, tail, 1)\n        },\n      peg$c84 = function(a, r, t) {\n            /*\n            export interface drop_stmt_node {\n              type: 'drop';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<drop_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c85 = function(a, r, i, t, op) {\n            /*\n            export interface drop_index_stmt_node {\n              type: 'drop';\n              keyword: string;\n              name: column_ref;\n              table: table_name;\n              options?: drop_index_opt;\n            }\n            => AstStatement<drop_index_stmt_node>\n            */\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c86 = function(a, kw, t) {\n            /*\n            export interface truncate_stmt_node {\n              type: 'trucate';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<truncate_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c87 = function(d) {\n            /*\n            export interface use_stmt_node {\n              type: 'use';\n              db: ident;\n            }\n            => AstStatement<use_stmt_node>\n            */\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c88 = function(t, e) {\n            /*\n            export interface alter_table_stmt_node {\n              type: 'alter';\n              table: table_ref_list;\n              expr: alter_action_list;\n            }\n            => AstStatement<alter_table_stmt_node>\n            */\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c89 = function(head, tail) {\n            // => alter_action[]\n            return createList(head, tail);\n          },\n      peg$c90 = function(kc, cd) {\n            /*\n            => {\n              action: 'add';\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } & create_column_definition;\n            */\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c91 = function(kc, c) {\n            /* => {\n              action: 'drop';\n              collumn: column_ref;\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } */\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c92 = function(id) {\n             /* => {\n               action: 'add';\n               type: 'alter';\n               } & create_index_definition */\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c93 = function(kw, tn) {\n             /* => {\n               action: 'rename';\n               type: 'alter';\n               resource: 'table';\n               keyword?: 'to' | 'as';\n               table: ident;\n               } */\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c94 = \"algorithm\",\n      peg$c95 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c96 = \"instant\",\n      peg$c97 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c98 = \"inplace\",\n      peg$c99 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c100 = \"copy\",\n      peg$c101 = peg$literalExpectation(\"COPY\", true),\n      peg$c102 = function(s, val) {\n          /* => {\n              type: 'alter';\n              keyword: 'algorithm';\n              resource: 'algorithm';\n              symbol?: '=';\n              algorithm: 'DEFAULT' | 'INSTANT' | 'INPLACE' | 'COPY';\n            }*/\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c103 = \"lock\",\n      peg$c104 = peg$literalExpectation(\"LOCK\", true),\n      peg$c105 = \"shared\",\n      peg$c106 = peg$literalExpectation(\"SHARED\", true),\n      peg$c107 = \"exclusive\",\n      peg$c108 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c109 = function(s, val) {\n          /* => {\n            type: 'alter';\n            keyword: 'lock';\n            resource: 'lock';\n            symbol?: '=';\n            lock: 'DEFAULT' | 'NONE' | 'SHARED' | 'EXCLUSIVE';\n          }*/\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c110 = function(kc, c, t, de, id) {\n             /* => {\n               index: column;\n               definition: cte_column_definition;\n               keyword: 'index' | 'key';\n               index_type?: index_type;\n               resource: 'index';\n               index_options?: index_options;\n             }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c111 = function(p, kc, c, de, id) {\n            /* => {\n                index: column;\n                definition: cte_column_definition;\n                keyword: 'fulltext' | 'spatial' | 'fulltext key' | 'spatial key' | 'fulltext index' | 'spatial index';\n                index_options?: index_options;\n                resource: 'index';\n              }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c112 = function(kc, c) {\n          // => { keyword: 'constraint'; constraint: ident; }\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c113 = \"primary key\",\n      peg$c114 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c115 = function(kc, p, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'primary key';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c116 = function(kc, u, p, i, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'unique key' | 'unique' | 'unique index';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c117 = \"foreign key\",\n      peg$c118 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c119 = function(kc, p, i, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'FOREIGN KEY';\n            keyword: constraint_name['keyword'];\n            index?: column;\n            resource: 'constraint';\n            reference_definition?: reference_definition;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c120 = \"match full\",\n      peg$c121 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c122 = \"match partial\",\n      peg$c123 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c124 = \"match simple\",\n      peg$c125 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c126 = function(kc, t, de, m, od, ou) {\n          /* => {\n              definition: cte_column_definition;\n              table: table_ref_list;\n              keyword: 'references';\n              match: 'match full' | 'match partial' | 'match simple';\n              on_delete?: on_reference;\n              on_update?: on_reference;\n            }*/\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c127 = \"on delete\",\n      peg$c128 = peg$literalExpectation(\"ON DELETE\", true),\n      peg$c129 = \"on update\",\n      peg$c130 = peg$literalExpectation(\"ON UPDATE\", true),\n      peg$c131 = function(kw, ro) {\n          // => { type: 'on delete' | 'on update'; value: reference_option; }\n          return {\n            type: kw.toLowerCase(),\n            value: ro\n          }\n        },\n      peg$c132 = \"restrict\",\n      peg$c133 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c134 = \"cascade\",\n      peg$c135 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c136 = \"set null\",\n      peg$c137 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c138 = \"no action\",\n      peg$c139 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c140 = \"set default\",\n      peg$c141 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c142 = function(kc) {\n          // => 'restrict' | 'cascade' | 'set null' | 'no action' | 'set default'\n          return kc.toLowerCase()\n        },\n      peg$c143 = \"trigger\",\n      peg$c144 = peg$literalExpectation(\"TRIGGER\", true),\n      peg$c145 = \"before\",\n      peg$c146 = peg$literalExpectation(\"BEFORE\", true),\n      peg$c147 = \"after\",\n      peg$c148 = peg$literalExpectation(\"AFTER\", true),\n      peg$c149 = \"instead of\",\n      peg$c150 = peg$literalExpectation(\"INSTEAD OF\", true),\n      peg$c151 = \"on\",\n      peg$c152 = peg$literalExpectation(\"ON\", true),\n      peg$c153 = \"execute\",\n      peg$c154 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c155 = \"procedure\",\n      peg$c156 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c157 = function(kw, kc, t, c, p, te, on, tn, fr, de, fe, tw, fc, fct) {\n          /*\n          => {\n            type: 'create';\n            constraint: string;\n            location: 'before' | 'after' | 'instead of';\n            events: trigger_event_list;\n            table: table_name;\n            from?: table_name;\n            deferrable?: trigger_deferrable;\n            for_each?: trigger_for_row;\n            when?: trigger_when;\n            execute: {\n              keyword: 'execute procedure';\n              expr: proc_func_call;\n            };\n            constraint_type: 'trigger';\n            keyword: 'trigger';\n            constraint_kw: 'constraint';\n            resource: 'constraint';\n          }\n          */\n          return {\n              type: 'create',\n              constraint: c,\n              location: p && p.toLowerCase(),\n              events: te,\n              table: tn,\n              from: fr && fr[2],\n              deferrable: de,\n              for_each: fe,\n              when: tw,\n              execute: {\n                keyword: 'execute procedure',\n                expr: fct\n              },\n              constraint_type: t && t.toLowerCase(),\n              keyword: t && t.toLowerCase(),\n              constraint_kw: kc && kc.toLowerCase(),\n              resource: 'constraint',\n            }\n        },\n      peg$c158 = function(kw) {\n          // => { keyword: 'insert' | 'delete' | 'truncate' }\n          const keyword = Array.isArray(kw) ? kw[0].toLowerCase() : kw.toLowerCase()\n          return {\n            keyword,\n          }\n        },\n      peg$c159 = \"of\",\n      peg$c160 = peg$literalExpectation(\"OF\", true),\n      peg$c161 = function(kw, a) {\n          // => { keyword: 'update'; args?: { keyword: 'of', columns: column_ref_list; }}\n          return {\n            keyword: kw && kw[0] && kw[0].toLowerCase(),\n            args: a && { keyword: a[0], columns: a[2] } || null\n          }\n        },\n      peg$c162 = function(head, tail) {\n          // => trigger_event[];\n          return createList(head, tail)\n        },\n      peg$c163 = \"not\",\n      peg$c164 = peg$literalExpectation(\"NOT\", true),\n      peg$c165 = \"deferrable\",\n      peg$c166 = peg$literalExpectation(\"DEFERRABLE\", true),\n      peg$c167 = \"initially immediate\",\n      peg$c168 = peg$literalExpectation(\"INITIALLY IMMEDIATE\", true),\n      peg$c169 = \"initially deferred\",\n      peg$c170 = peg$literalExpectation(\"INITIALLY DEFERRED\", true),\n      peg$c171 = function(kw, args) {\n          // => { keyword: 'deferrable' | 'not deferrable'; args: 'initially immediate' | 'initially deferred' }\n          return {\n            keyword: kw && kw[0] ? `${kw[0].toLowerCase()} deferrable` : 'deferrable',\n            args: args && args.toLowerCase(),\n          }\n        },\n      peg$c172 = \"for\",\n      peg$c173 = peg$literalExpectation(\"FOR\", true),\n      peg$c174 = \"each\",\n      peg$c175 = peg$literalExpectation(\"EACH\", true),\n      peg$c176 = \"row\",\n      peg$c177 = peg$literalExpectation(\"ROW\", true),\n      peg$c178 = \"statement\",\n      peg$c179 = peg$literalExpectation(\"STATEMENT\", true),\n      peg$c180 = function(kw, e, ob) {\n          // => { keyword: 'for' | 'for each'; args: 'row' | 'statement' }\n          return {\n            keyword: e ? `${kw.toLowerCase()} ${e.toLowerCase()}` : kw.toLowerCase(),\n            args: ob.toLowerCase()\n          }\n        },\n      peg$c181 = function(condition) {\n          // => { type: 'when'; cond: expr; parentheses: true; }\n          return {\n            type: 'when',\n            cond: condition,\n            parentheses: true,\n          }\n        },\n      peg$c182 = function(head, tail) {\n          // => table_option[]\n          return createList(head, tail)\n        },\n      peg$c183 = \"character\",\n      peg$c184 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c185 = \"set\",\n      peg$c186 = peg$literalExpectation(\"SET\", true),\n      peg$c187 = function() {\n          // => string\n          return 'CHARACTER SET'\n        },\n      peg$c188 = \"charset\",\n      peg$c189 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c190 = \"collate\",\n      peg$c191 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c192 = function(kw, t, s, v) {\n          /* => {\n            keyword: 'character set' | 'charset' | 'collate' | 'default character set' | 'default charset' | 'default collate';\n            symbol: '=';\n            value: ident_name;\n            } */\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c193 = \"avg_row_length\",\n      peg$c194 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c195 = \"key_block_size\",\n      peg$c196 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c197 = \"max_rows\",\n      peg$c198 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c199 = \"min_rows\",\n      peg$c200 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c201 = \"stats_sample_pages\",\n      peg$c202 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c203 = function(kw, s, v) {\n          /* => {\n            keyword: 'auto_increment' | 'avg_row_length' | 'key_block_size' | 'max_rows' | 'min_rows' | 'stats_sample_pages';\n            symbol: '=';\n            value: number; // <== literal_numeric['value']\n            } */\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c204 = \"connection\",\n      peg$c205 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c206 = function(kw, s, c) {\n          // => { keyword: 'connection' | 'comment'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c207 = \"compression\",\n      peg$c208 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c209 = \"'\",\n      peg$c210 = peg$literalExpectation(\"'\", false),\n      peg$c211 = \"zlib\",\n      peg$c212 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c213 = \"lz4\",\n      peg$c214 = peg$literalExpectation(\"LZ4\", true),\n      peg$c215 = function(kw, s, v) {\n          // => { keyword: 'compression'; symbol: '='; value: \"'ZLIB'\" | \"'LZ4'\" | \"'NONE'\" }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c216 = \"engine\",\n      peg$c217 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c218 = function(kw, s, c) {\n          // => { keyword: 'engine'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c219 = function(fsid) {\n             // => create_fulltext_spatial_index_definition & { action: 'add'; type: 'alter' }\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c220 = function(t) {\n            /*\n            export interface rename_stmt_node {\n              type: 'rename';\n              table: table_to_list;\n            }\n             => AstStatement<rename_stmt_node>\n             */\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c221 = function(kw, a) {\n            /*\n            export interface set_stmt_node {\n              type: 'set';\n              expr: assign_stmt & { keyword?: 'GLOBAL' | 'SESSION' | 'LOCAL' | 'PERSIST' | 'PERSIST_ONLY'; };\n            }\n             => AstStatement<set_stmt_node>\n             */\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c222 = \"in\",\n      peg$c223 = peg$literalExpectation(\"IN\", true),\n      peg$c224 = \"access share\",\n      peg$c225 = peg$literalExpectation(\"ACCESS SHARE\", true),\n      peg$c226 = \"row share\",\n      peg$c227 = peg$literalExpectation(\"ROW SHARE\", true),\n      peg$c228 = \"row exclusive\",\n      peg$c229 = peg$literalExpectation(\"ROW EXCLUSIVE\", true),\n      peg$c230 = \"share update exclusive\",\n      peg$c231 = peg$literalExpectation(\"SHARE UPDATE EXCLUSIVE\", true),\n      peg$c232 = \"share row exclusive\",\n      peg$c233 = peg$literalExpectation(\"SHARE ROW EXCLUSIVE\", true),\n      peg$c234 = \"access exclusive\",\n      peg$c235 = peg$literalExpectation(\"ACCESS EXCLUSIVE\", true),\n      peg$c236 = \"share\",\n      peg$c237 = peg$literalExpectation(\"SHARE\", true),\n      peg$c238 = \"mode\",\n      peg$c239 = peg$literalExpectation(\"MODE\", true),\n      peg$c240 = function(m) {\n          // => { mode: string; }\n          return {\n            mode: `in ${m.toLowerCase()} mode`\n          }\n        },\n      peg$c241 = \"nowait\",\n      peg$c242 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c243 = function(k, t, lm, nw) {\n\n            /*\n            export interface lock_stmt_node {\n              type: 'lock';\n              keyword: 'lock';\n              tables: [[table_base], ...{table: table_ref}[]]; // see table_ref_list\n              lock_mode?: lock_mode;\n              nowait?: 'NOWAIT';\n            }\n             => AstStatement<lock_stmt_node>\n             */\n\n          if (t) t.forEach(tt => tableList.add(`lock::${tt.db}::${tt.table}`))\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: k && k.toLowerCase(),\n              tables: t.map((table) => ({ table })),\n              lock_mode: lm,\n              nowait: nw\n            }\n          }\n        },\n      peg$c244 = function(e) {\n          /*\n          export interface call_stmt_node {\n            type: 'call';\n            expr: proc_func_call;\n          }\n             => AstStatement<call_stmt_node>\n             */\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c245 = \"(\",\n      peg$c246 = peg$literalExpectation(\"(\", false),\n      peg$c247 = \")\",\n      peg$c248 = peg$literalExpectation(\")\", false),\n      peg$c249 = function(s) {\n          /*\n          export interface select_stmt_node extends select_stmt_nake  {\n             parentheses_symbol: true;\n            }\n            => select_stmt_node\n            */\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c250 = function(head, tail) {\n            // => cte_definition[]\n            return createList(head, tail);\n          },\n      peg$c251 = function(cte) {\n            // => [cte_definition & {recursive: true; }]\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c252 = function(name, columns, stmt) {\n          // => { name: ident_name; stmt: union_stmt; columns?: cte_column_definition; }\n            return { name, stmt, columns };\n          },\n      peg$c253 = function(head, tail) {\n          // => column[]\n            return createList(head, tail);\n          },\n      peg$c254 = function(cte, opts, d, c, f, w, g, h, o, l) {\n            /* => {\n                with?: with_clause;\n                type: 'select';\n                options?: option_clause;\n                distinct?: 'DISTINCT';\n                columns: column_clause;\n                from?: from_clause;\n                where?: where_clause;\n                groupby?: group_by_clause;\n                having?: having_clause;\n                orderby?: order_by_clause;\n                limit?: limit_clause;\n              }*/\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                from: f,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l\n            };\n        },\n      peg$c255 = function(head, tail) {\n          // => query_option[]\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c256 = function(option) {\n            // =>  'SQL_CALC_FOUND_ROWS'| 'SQL_CACHE'| 'SQL_NO_CACHE'| 'SQL_BIG_RESULT'| 'SQL_SMALL_RESULT'| 'SQL_BUFFER_RESULT'\n            return option;\n          },\n      peg$c257 = function(head, tail) {\n            // => 'ALL' | '*' | column_list_item[]\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c258 = function(head, tail) {\n          // => column_list_item[]\n            return createList(head, tail);\n          },\n      peg$c259 = function(e, s, t, alias) {\n          // => { type: 'cast'; expr: expr; symbol: '::'; target: data_type;  as?: null; }\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c260 = function(tbl) {\n          // => { type: 'star_ref'; expr: column_ref; as: null; }\n\n            columnList.add(`select::${tbl}::(.*)`);\n            return {\n              type: 'star_ref',\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c261 = function(e, alias) {\n          // => { type: 'expr'; expr: expr; as?: alias_clause; }\n            return { type: 'expr', expr: e, as: alias };\n          },\n      peg$c262 = function(i) { /*=>alias_ident*/ return i; },\n      peg$c263 = function(i) { /*=>ident*/ return i; },\n      peg$c264 = function(l) { /*=>table_ref_list*/return l; },\n      peg$c265 = function(head, tail) {\n          // => table_to_item[]\n            return createList(head, tail);\n          },\n      peg$c266 = function(head, tail) {\n          // => table_name[]\n            return [head, tail]\n          },\n      peg$c267 = \"btree\",\n      peg$c268 = peg$literalExpectation(\"BTREE\", true),\n      peg$c269 = \"hash\",\n      peg$c270 = peg$literalExpectation(\"HASH\", true),\n      peg$c271 = \"gist\",\n      peg$c272 = peg$literalExpectation(\"GIST\", true),\n      peg$c273 = \"gin\",\n      peg$c274 = peg$literalExpectation(\"GIN\", true),\n      peg$c275 = function(t) {\n          // => { keyword: 'using'; type: 'btree' | 'hash' | 'gist' | 'gin' }\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c276 = function(head, tail) {\n          // => index_option[]\n          return createList(head, tail)\n        },\n      peg$c277 = function(head, tail) {\n          // => index_option[]\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c278 = function(k, e, kbs) {\n          // => { type: 'key_block_size'; symbol: '='; expr: number; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          }\n        },\n      peg$c279 = function(k, e, kbs) {\n          // => { type: ident_name; symbol: '='; expr: number | {type: 'origin'; value: ident; }; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: typeof kbs === 'string' && { type: 'origin', value: kbs } || kbs\n          };\n        },\n      peg$c280 = \"with\",\n      peg$c281 = peg$literalExpectation(\"WITH\", true),\n      peg$c282 = \"parser\",\n      peg$c283 = peg$literalExpectation(\"PARSER\", true),\n      peg$c284 = function(pn) {\n          // => { type: 'with parser'; expr: ident_name }\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c285 = \"visible\",\n      peg$c286 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c287 = \"invisible\",\n      peg$c288 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c289 = function(k) {\n          // => { type: 'visible'; expr: 'visible' } | { type: 'invisible'; expr: 'invisible' }\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c290 = function(head, tail) {\n            // => [table_base, ...table_ref[]]\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c291 = function(t) { /* => table_base */ return t; },\n      peg$c292 = function(t) { /* => table_join */ return t; },\n      peg$c293 = function(op, t, head, tail) {\n            // => table_base & {join: join_op; using: ident_name[]; }\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c294 = function(op, t, expr) {\n          // => table_base & {join: join_op; on?: on_clause; }\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c295 = function(op, stmt, alias, expr) {\n          /* => {\n            expr: union_stmt & { parentheses: true; };\n            as?: alias_clause;\n            join: join_op;\n            on?: on_clause;\n          }*/\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c296 = function() {\n          // => { type: 'dual' }\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c297 = function(t, alias) {\n          // => table_name & { as?: alias_clause; }\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c298 = function(stmt, alias) {\n          // => { expr: union_stmt; as?: alias_clause; }\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c299 = function() { /* => 'LEFT JOIN' */ return 'LEFT JOIN'; },\n      peg$c300 = function() { /* =>  'RIGHT JOIN' */ return 'RIGHT JOIN'; },\n      peg$c301 = function() { /* => 'FULL JOIN' */ return 'FULL JOIN'; },\n      peg$c302 = function() { /* => 'INNER JOIN' */ return 'INNER JOIN'; },\n      peg$c303 = function(dt, schema, tail) {\n            // => { db?: ident; table: ident | '*'; }\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = `${dt}.${schema[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c304 = function(dt) {\n          // => IGNORE\n            tableList.add(`select::${dt}::(.*)`);\n            return {\n              db: dt,\n              table: '*'\n            }\n          },\n      peg$c305 = function(dt, tail) {\n          // => IGNORE\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c306 = function(v) {\n          // => IGNORE\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c307 = function(e) { /* => expr */ return e; },\n      peg$c308 = function(e) { /* => expr_list['value'] */ return e.value; },\n      peg$c309 = function(head, tail) {\n          // => column_ref[]\n            return createList(head, tail);\n          },\n      peg$c310 = function(ws) {\n          // => { window_specification: window_specification; parentheses: boolean }\n          return {\n            window_specification: ws || {},\n            parentheses: true\n          }\n        },\n      peg$c311 = function(bc, l, w) {\n          // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: string }\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c312 = function(bc, l) {\n          // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: null }\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: null\n          }\n        },\n      peg$c313 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c314 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c315 = \"following\",\n      peg$c316 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c317 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c318 = \"preceding\",\n      peg$c319 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c320 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c321 = \"current\",\n      peg$c322 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c323 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c324 = \"unbounded\",\n      peg$c325 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c326 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c327 = function(bc) { /* => column_clause */ return bc; },\n      peg$c328 = function(l) { /* => order_by_list */ return l; },\n      peg$c329 = function(head, tail) {\n          // => order_by_element[]\n            return createList(head, tail);\n          },\n      peg$c330 = function(e, d) {\n          // => { expr: expr; type: 'ASC' | 'DESC'; }\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c331 = function(i1, tail) {\n          // => { separator: 'offset' | ''; value: [number_or_param | { type: 'origin', value: 'all' }, number_or_param?] }\n            const res = []\n            if (typeof i1 === 'string') res.push({ type: 'origin', value: 'all' })\n            else res.push(i1)\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c332 = function(t, l, w, r) {\n            /* export interface update_stmt_node {\n               type: 'update';\n               table: table_ref_list;\n               set: set_list;\n               where?: where_clause;\n               returning?: returning_stmt;\n            }\n           => AstStatement<update_stmt_node>\n           */\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table } = tableInfo\n              tableList.add(`update::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                returning: r,\n              }\n            };\n          },\n      peg$c333 = function(t, f, w) {\n            /*\n            export interface table_ref_addition extends table_name {\n              addition: true;\n              as?: alias_clause;\n            }\n             export interface delete_stmt_node {\n               type: 'delete';\n               table?: table_ref_list | [table_ref_addition];\n               where?: where_clause;\n            }\n           => AstStatement<delete_stmt_node>\n           */\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c334 = function(head, tail) {\n            // => set_item[]\n            return createList(head, tail);\n          },\n      peg$c335 = \"=\",\n      peg$c336 = peg$literalExpectation(\"=\", false),\n      peg$c337 = function(tbl, c, v) {\n            // => { column: ident; value: additive_expr; table?: ident;}\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c338 = function(tbl, c, v) {\n            // => { column: ident; value: column_ref; table?: ident; keyword: 'values' }\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c339 = function(k, c) {\n          // => { type: 'returning'; columns: column_ref_list | column_ref; }\n          return {\n            type: k && k.toLowerCase() || 'returning',\n            columns: c === '*' && [{ type: 'columne_ref', table: null, column: '*' }] || c\n          }\n        },\n      peg$c340 = function(head, tail) {\n          // => ident_name[]\n            return createList(head, tail)\n          },\n      peg$c341 = function(v) {\n          // => value_item\n          return v\n        },\n      peg$c342 = function(ri, t, p, c, v, r) {\n            /*\n             export interface replace_insert_stmt_node {\n               type: 'insert' | 'replace';\n               table?: [table_name];\n               columns: column_list;\n               values: insert_value_clause;\n               partition?: insert_partition;\n               returning?: returning_stmt;\n            }\n           => AstStatement<replace_insert_stmt_node>\n           */\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c343 = function(ri, t, p, v, r) {\n           // => AstStatement<replace_insert_stmt_node>\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c344 = function() { /* => 'insert' */ return 'insert'; },\n      peg$c345 = function() { /* => 'replace' */return 'replace'; },\n      peg$c346 = function(l) { /* => value_list */ return l; },\n      peg$c347 = function(head, tail) {\n          // => value_item[]\n            return createList(head, tail);\n          },\n      peg$c348 = function(l) {\n          // => expr_list\n            return l;\n          },\n      peg$c349 = function(head, tail) {\n          // => { type: 'expr_list'; value: expr[] }\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c350 = function(e, u) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c351 = function(e) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: '',\n            }\n          },\n      peg$c352 = function(expr, condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr?: expr;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr || null,\n              args: condition_list\n            };\n          },\n      peg$c353 = function(condition, result) {\n          // => { type: 'when'; cond: expr; result: expr; }\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c354 = function(result) {\n          // => { type: 'else'; condition?: never; result: expr; }\n          return { type: 'else', result: result };\n        },\n      peg$c355 = function(head, tail) {\n          /*\n          export type BINARY_OPERATORS = LOGIC_OPERATOR | 'OR' | 'AND' | multiplicative_operator | additive_operator\n            | arithmetic_comparison_operator\n            | 'IN' | 'NOT IN'\n            | 'BETWEEN' | 'NOT BETWEEN'\n            | 'IS' | 'IS NOT'\n            | 'LIKE'\n            | '@>' | '<@' | OPERATOR_CONCATENATION | DOUBLE_WELL_ARROW | WELL_ARROW | '?' | '?|' | '?&' | '#-'\n          export interface binary_expr {\n            type: 'binary_expr',\n            operator: BINARY_OPERATORS,\n            left: expr,\n            right: expr\n          }\n          => binary_expr\n          */\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c356 = function(op, tail) {\n          /*\n          export type UNARY_OPERATORS = '+' | '-' | 'EXISTS' | 'NOT EXISTS'  | 'NULL'\n          => {\n            type: 'unary_expr',\n            operator: UNARY_OPERATORS,\n            expr: expr;\n            parentheses?: boolean;\n          } */\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c357 = function(head, tail) {\n          // => binary_expr\n          return createBinaryExprChain(head, tail);\n      },\n      peg$c358 = function(lf, head, rt) { if ((lf && !rt) || (!lf && rt)) return true },\n      peg$c359 = function(lf, head, rt) {\n          // => binary_expr\n        if (lf && rt) head.parentheses = true\n        return head\n      },\n      peg$c360 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c361 = \"!\",\n      peg$c362 = peg$literalExpectation(\"!\", false),\n      peg$c363 = function(expr) {\n          // => unary_expr\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c364 = function(left, rh) {\n          // => binary_expr\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c365 = function(op, stmt) {\n          // => unary_expr\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c366 = function(nk) { /* => 'NOT EXISTS' */ return nk[0] + ' ' + nk[2]; },\n      peg$c367 = function(l) {\n          // => { type: 'arithmetic'; tail: any }\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c368 = \">=\",\n      peg$c369 = peg$literalExpectation(\">=\", false),\n      peg$c370 = \">\",\n      peg$c371 = peg$literalExpectation(\">\", false),\n      peg$c372 = \"<=\",\n      peg$c373 = peg$literalExpectation(\"<=\", false),\n      peg$c374 = \"<>\",\n      peg$c375 = peg$literalExpectation(\"<>\", false),\n      peg$c376 = \"<\",\n      peg$c377 = peg$literalExpectation(\"<\", false),\n      peg$c378 = \"!=\",\n      peg$c379 = peg$literalExpectation(\"!=\", false),\n      peg$c380 = function(right) {\n          // => { op: 'IS'; right: additive_expr; }\n            return { op: 'IS', right: right };\n          },\n      peg$c381 = function(right) {\n          // => { type: 'origin'; value: string; }\n          const { db, table } = right.pop()\n          const tableName = table === '*' ? '*' : `\"${table}\"`\n          let tableStr = db ? `\"${db}\".${tableName}` : tableName\n          return { op: 'IS', right: {\n            type: 'origin',\n            value: `DISTINCT FROM ${tableStr}`\n          }}\n        },\n      peg$c382 = function(right) {\n            // => { type: 'IS NOT'; right: additive_expr; }\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c383 = function(op, begin, end) {\n          // => { op: 'BETWEEN' | 'NOT BETWEEN'; right: { type: 'expr_list'; value: [expr, expr] }  }\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c384 = function(nk) { /* => 'NOT BETWEEN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c385 = function(nk) { /* => 'LIKE' */ return nk[0] + ' ' + nk[2]; },\n      peg$c386 = function(nk) { /* => 'NOT IN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c387 = function(op, right) {\n           // => { op: like_op; right: literal | comparison_expr}\n            return { op: op, right: right };\n          },\n      peg$c388 = function(op, l) {\n          // => {op: in_op; right: expr_list | var_decl | literal_string; }\n            return { op: op, right: l };\n          },\n      peg$c389 = function(op, e) {\n          // => IGNORE\n            return { op: op, right: e };\n          },\n      peg$c390 = \"@>\",\n      peg$c391 = peg$literalExpectation(\"@>\", false),\n      peg$c392 = \"<@\",\n      peg$c393 = peg$literalExpectation(\"<@\", false),\n      peg$c394 = \"?\",\n      peg$c395 = peg$literalExpectation(\"?\", false),\n      peg$c396 = \"?|\",\n      peg$c397 = peg$literalExpectation(\"?|\", false),\n      peg$c398 = \"?&\",\n      peg$c399 = peg$literalExpectation(\"?&\", false),\n      peg$c400 = \"#-\",\n      peg$c401 = peg$literalExpectation(\"#-\", false),\n      peg$c402 = function(s, c) {\n          // => { op: string; right: expr }\n          return {\n            op: s,\n            right: c && c.expr || c\n          }\n        },\n      peg$c403 = \"+\",\n      peg$c404 = peg$literalExpectation(\"+\", false),\n      peg$c405 = \"-\",\n      peg$c406 = peg$literalExpectation(\"-\", false),\n      peg$c407 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c408 = \"*\",\n      peg$c409 = peg$literalExpectation(\"*\", false),\n      peg$c410 = \"/\",\n      peg$c411 = peg$literalExpectation(\"/\", false),\n      peg$c412 = \"%\",\n      peg$c413 = peg$literalExpectation(\"%\", false),\n      peg$c414 = function(e, tail) {\n          // => expr | binary_expr\n            e.parentheses = true;\n            if (!tail || tail.length === 0) return e\n            return createBinaryExprChain(e, tail);\n          },\n      peg$c415 = function(list) {\n          // => expr_list\n              list.parentheses = true;\n              return list;\n          },\n      peg$c416 = \"$\",\n      peg$c417 = peg$literalExpectation(\"$\", false),\n      peg$c418 = function(prepared_symbol, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$${n.value}`,\n          }\n        },\n      peg$c419 = function(tbl) {\n          // => IGNORE\n            columnList.add(`select::${tbl}::(.*)`);\n            return {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n            }\n          },\n      peg$c420 = function(tbl, col, a, j) {\n          // => IGNORE\n            const tableName = tbl && tbl[0] || null\n            columnList.add(`select::${tableName}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tableName,\n              column: col,\n              arrow: a,\n              property: j\n            };\n        },\n      peg$c421 = function(tbl, col) {\n            /* => {\n              type: 'column_ref';\n              table: ident;\n              column: column | '*';\n              arrow?: '->>' | '->';\n              property?: literal_string | literal_numeric;\n            } */\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c422 = function(col) {\n          // => IGNORE\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c423 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c424 = function(name) {\n            // => indent_name\n            return name;\n          },\n      peg$c425 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c426 = function(name) {\n            // => string\n            return name;\n          },\n      peg$c427 = function(name) {\n            // => IGNORE\n            return name;\n          },\n      peg$c428 = \"\\\"\",\n      peg$c429 = peg$literalExpectation(\"\\\"\", false),\n      peg$c430 = /^[^\"]/,\n      peg$c431 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c432 = function(chars) { /* => string */ return chars.join(''); },\n      peg$c433 = /^[^']/,\n      peg$c434 = peg$classExpectation([\"'\"], true, false),\n      peg$c435 = \"`\",\n      peg$c436 = peg$literalExpectation(\"`\", false),\n      peg$c437 = /^[^`]/,\n      peg$c438 = peg$classExpectation([\"`\"], true, false),\n      peg$c439 = function(name) { /* => string */ return name; },\n      peg$c440 = function(start, parts) { /* => string */ return start + parts.join(''); },\n      peg$c441 = function(start, parts) {\n            // => string\n            return start + parts.join('');\n          },\n      peg$c442 = /^[A-Za-z_]/,\n      peg$c443 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c444 = /^[A-Za-z0-9_\\-]/,\n      peg$c445 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c446 = /^[A-Za-z0-9_]/,\n      peg$c447 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c448 = \":\",\n      peg$c449 = peg$literalExpectation(\":\", false),\n      peg$c450 = function(l) {\n          // => { type: 'param'; value: ident_name }\n            return { type: 'param', value: l[1] };\n          },\n      peg$c451 = \"over\",\n      peg$c452 = peg$literalExpectation(\"OVER\", true),\n      peg$c453 = function(aws) {\n          // => { type: 'windows'; as_window_specification: as_window_specification }\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c454 = function(bc, l) {\n          // => { partitionby: partition_by_clause; orderby: order_by_clause }\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c455 = function(name, over) {\n          // => { type: 'window_func'; name: string; over: over_partition }\n          return {\n            type: 'window_func',\n            name: name,\n            over: over\n          }\n        },\n      peg$c456 = function(name, l, cn, over) {\n          // => { type: 'window_func'; name: string; args: expr_list; consider_nulls: string; over: over_partition }\n          return {\n            type: 'window_func',\n            name: name,\n            args: l,\n            over: over,\n            consider_nulls: cn || 'RESPECT NULLS'\n          };\n        },\n      peg$c457 = function(name, l, cn, over) {\n          // => window_fun_laglead\n          return {\n            type: 'window_func',\n            name: name,\n            args: {\n              type: 'expr_list', value: [l]\n            },\n            over: over,\n            consider_nulls: cn || 'RESPECT NULLS'\n          };\n        },\n      peg$c458 = \"first_value\",\n      peg$c459 = peg$literalExpectation(\"FIRST_VALUE\", true),\n      peg$c460 = \"last_value\",\n      peg$c461 = peg$literalExpectation(\"LAST_VALUE\", true),\n      peg$c462 = \"row_number\",\n      peg$c463 = peg$literalExpectation(\"ROW_NUMBER\", true),\n      peg$c464 = \"dense_rank\",\n      peg$c465 = peg$literalExpectation(\"DENSE_RANK\", true),\n      peg$c466 = \"rank\",\n      peg$c467 = peg$literalExpectation(\"RANK\", true),\n      peg$c468 = \"lag\",\n      peg$c469 = peg$literalExpectation(\"LAG\", true),\n      peg$c470 = \"lead\",\n      peg$c471 = peg$literalExpectation(\"LEAD\", true),\n      peg$c472 = \"nth_value\",\n      peg$c473 = peg$literalExpectation(\"NTH_VALUE\", true),\n      peg$c474 = \"ignore\",\n      peg$c475 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c476 = \"respect\",\n      peg$c477 = peg$literalExpectation(\"RESPECT\", true),\n      peg$c478 = function(v) {\n          // => string\n          return v.toUpperCase() + ' NULLS'\n        },\n      peg$c479 = function(name, e, bc) {\n          // => { type: 'aggr_func'; name: 'SUM' | 'MAX' | 'MIN' | 'AVG'; args: { expr: additive_expr }; over: over_partition }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc\n            };\n          },\n      peg$c480 = function(name, arg, bc) {\n          // => { type: 'aggr_func'; name: 'COUNT'; args:count_arg; over: over_partition }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c481 = function(d, c) { /* => { distinct: 'DISTINCT'; expr: column_ref; } */  return { distinct: d, expr: c }; },\n      peg$c482 = function(d, c) { /* => { distinct: 'DISTINCT'; expr: column_ref; } */  c.parentheses = true; return { distinct: d, expr: c }; },\n      peg$c483 = function(e) { /* => { expr: star_expr } */ return { expr: e }; },\n      peg$c484 = function(name, arg, o) {\n          // => { type: 'aggr_func'; args:count_arg; name: 'ARRAY_AGG'; orderby?: order_by_clause  }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              orderby: o,\n            };\n          },\n      peg$c485 = function() { /* => { type: 'star'; value: '*' } */ return { type: 'star', value: '*' }; },\n      peg$c486 = function(name, l) {\n            // => { type: 'function'; name: string; args: expr_list; }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] }\n            };\n          },\n      peg$c487 = function(name, l, bc) {\n          // => { type: 'function'; name: string; args: expr_list; over?: over_partition; }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c488 = \"century\",\n      peg$c489 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c490 = \"day\",\n      peg$c491 = peg$literalExpectation(\"DAY\", true),\n      peg$c492 = \"decade\",\n      peg$c493 = peg$literalExpectation(\"DECADE\", true),\n      peg$c494 = \"dow\",\n      peg$c495 = peg$literalExpectation(\"DOW\", true),\n      peg$c496 = \"doy\",\n      peg$c497 = peg$literalExpectation(\"DOY\", true),\n      peg$c498 = \"epoch\",\n      peg$c499 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c500 = \"hour\",\n      peg$c501 = peg$literalExpectation(\"HOUR\", true),\n      peg$c502 = \"isodow\",\n      peg$c503 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c504 = \"isoyear\",\n      peg$c505 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c506 = \"microseconds\",\n      peg$c507 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c508 = \"millennium\",\n      peg$c509 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c510 = \"milliseconds\",\n      peg$c511 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c512 = \"minute\",\n      peg$c513 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c514 = \"month\",\n      peg$c515 = peg$literalExpectation(\"MONTH\", true),\n      peg$c516 = \"quarter\",\n      peg$c517 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c518 = \"second\",\n      peg$c519 = peg$literalExpectation(\"SECOND\", true),\n      peg$c520 = \"timezone\",\n      peg$c521 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c522 = \"timezone_hour\",\n      peg$c523 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c524 = \"timezone_minute\",\n      peg$c525 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c526 = \"week\",\n      peg$c527 = peg$literalExpectation(\"WEEK\", true),\n      peg$c528 = \"year\",\n      peg$c529 = peg$literalExpectation(\"YEAR\", true),\n      peg$c530 = function() {\n          // => 'string'\n          return f\n        },\n      peg$c531 = function(kw, f, t, s) {\n          // => { type: 'extract'; args: { field: extract_filed; cast_type: 'TIMESTAMP' | 'INTERVAL' | 'TIME'; source: expr; }}\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c532 = function(e, s, t, alias) {\n          /* => {\n              as?: alias_clause,\n              type: 'cast';\n              expr: expr | literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c533 = function(e, t) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c534 = function(e, precision) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c535 = function(e, precision, scale) {\n            // => IGNORE\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c536 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c537 = function(s, c) {\n          /*\n            => {\n              expr_list: expr_list | {type: 'origin', value: ident },\n              type: string,\n              keyword: string,\n              brackets: boolean\n            }\n          */\n          return {\n            expr_list: c || { type: 'origin', value: '' },\n            type: 'array',\n            keyword: 'array',\n            brackets: true\n          }\n        },\n      peg$c538 = function(head, tail) {\n          // => literal[]\n            return createList(head, tail);\n          },\n      peg$c539 = function() {\n          // => { type: 'null'; value: null }\n            return { type: 'null', value: null };\n          },\n      peg$c540 = function() {\n          // => { type: 'not null'; value: 'not null' }\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c541 = function() {\n            // => { type: 'bool', value: true }\n            return { type: 'bool', value: true };\n          },\n      peg$c542 = function() {\n            //=> { type: 'bool', value: false }\n            return { type: 'bool', value: false };\n          },\n      peg$c543 = function(ca) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c544 = function(ca) {\n            // => { type: 'string'; value: string; }\n            return {\n              type: 'double_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c545 = function(type, ca) {\n            //=> { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c546 = function(type, lf, rt) { if (lf && rt) return true },\n      peg$c547 = \"on update current_timestamp\",\n      peg$c548 = peg$literalExpectation(\"ON UPDATE CURRENT_TIMESTAMP\", true),\n      peg$c549 = function(type, lf, rt, up) {\n            // => { type: 'origin'; value: string; }\n            return {\n              type: 'origin',\n              value: (up ? `${type} ${up}` : type).toLowerCase()\n            };\n          },\n      peg$c550 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c551 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c552 = /^[^'\\\\]/,\n      peg$c553 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c554 = \"\\\\'\",\n      peg$c555 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c556 = function() { return \"'\";  },\n      peg$c557 = \"\\\\\\\"\",\n      peg$c558 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c559 = function() { return '\"';  },\n      peg$c560 = \"\\\\\\\\\",\n      peg$c561 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c562 = function() { return \"\\\\\"; },\n      peg$c563 = \"\\\\/\",\n      peg$c564 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c565 = function() { return \"/\";  },\n      peg$c566 = \"\\\\b\",\n      peg$c567 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c568 = function() { return \"\\b\"; },\n      peg$c569 = \"\\\\f\",\n      peg$c570 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c571 = function() { return \"\\f\"; },\n      peg$c572 = \"\\\\n\",\n      peg$c573 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c574 = function() { return \"\\n\"; },\n      peg$c575 = \"\\\\r\",\n      peg$c576 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c577 = function() { return \"\\r\"; },\n      peg$c578 = \"\\\\t\",\n      peg$c579 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c580 = function() { return \"\\t\"; },\n      peg$c581 = \"\\\\u\",\n      peg$c582 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c583 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c584 = \"\\\\\",\n      peg$c585 = peg$literalExpectation(\"\\\\\", false),\n      peg$c586 = /^[\\n\\r]/,\n      peg$c587 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c588 = function(n) {\n          // => number | { type: 'bigint'; value: string; }\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c589 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c590 = function(int_, frac) {\n          // => IGNORE\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c591 = function(int_, exp) {\n          // => IGNORE\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c592 = function(int_) {\n          // => IGNORE\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c593 = function(op, digits) { return \"-\" + digits; },\n      peg$c594 = function(op, digit) { return \"-\" + digit; },\n      peg$c595 = \".\",\n      peg$c596 = peg$literalExpectation(\".\", false),\n      peg$c597 = function(digits) { return \".\" + digits; },\n      peg$c598 = function(e, digits) { return e + digits; },\n      peg$c599 = function(digits) { return digits.join(\"\"); },\n      peg$c600 = /^[0-9]/,\n      peg$c601 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c602 = /^[0-9a-fA-F]/,\n      peg$c603 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c604 = /^[eE]/,\n      peg$c605 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c606 = /^[+\\-]/,\n      peg$c607 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c608 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c609 = \"null\",\n      peg$c610 = peg$literalExpectation(\"NULL\", true),\n      peg$c611 = \"not null\",\n      peg$c612 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c613 = \"true\",\n      peg$c614 = peg$literalExpectation(\"TRUE\", true),\n      peg$c615 = \"to\",\n      peg$c616 = peg$literalExpectation(\"TO\", true),\n      peg$c617 = \"false\",\n      peg$c618 = peg$literalExpectation(\"FALSE\", true),\n      peg$c619 = \"show\",\n      peg$c620 = peg$literalExpectation(\"SHOW\", true),\n      peg$c621 = \"drop\",\n      peg$c622 = peg$literalExpectation(\"DROP\", true),\n      peg$c623 = function() { return 'DROP'; },\n      peg$c624 = \"use\",\n      peg$c625 = peg$literalExpectation(\"USE\", true),\n      peg$c626 = \"alter\",\n      peg$c627 = peg$literalExpectation(\"ALTER\", true),\n      peg$c628 = \"select\",\n      peg$c629 = peg$literalExpectation(\"SELECT\", true),\n      peg$c630 = \"update\",\n      peg$c631 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c632 = \"create\",\n      peg$c633 = peg$literalExpectation(\"CREATE\", true),\n      peg$c634 = \"temporary\",\n      peg$c635 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c636 = function() { return 'TEMPORARY'; },\n      peg$c637 = \"temp\",\n      peg$c638 = peg$literalExpectation(\"TEMP\", true),\n      peg$c639 = function() { return 'TEMP'; },\n      peg$c640 = \"if not exists\",\n      peg$c641 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c642 = \"delete\",\n      peg$c643 = peg$literalExpectation(\"DELETE\", true),\n      peg$c644 = \"insert\",\n      peg$c645 = peg$literalExpectation(\"INSERT\", true),\n      peg$c646 = \"RECURSIVE\",\n      peg$c647 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c648 = \"replace\",\n      peg$c649 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c650 = \"returning\",\n      peg$c651 = peg$literalExpectation(\"RETURNING\", true),\n      peg$c652 = function() { return 'RETURNING' },\n      peg$c653 = \"rename\",\n      peg$c654 = peg$literalExpectation(\"RENAME\", true),\n      peg$c655 = \"explain\",\n      peg$c656 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c657 = \"partition\",\n      peg$c658 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c659 = function() { return 'PARTITION' },\n      peg$c660 = \"into\",\n      peg$c661 = peg$literalExpectation(\"INTO\", true),\n      peg$c662 = \"from\",\n      peg$c663 = peg$literalExpectation(\"FROM\", true),\n      peg$c664 = \"as\",\n      peg$c665 = peg$literalExpectation(\"AS\", true),\n      peg$c666 = \"table\",\n      peg$c667 = peg$literalExpectation(\"TABLE\", true),\n      peg$c668 = function() { return 'TABLE'; },\n      peg$c669 = \"database\",\n      peg$c670 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c671 = function() { return 'DATABASE'; },\n      peg$c672 = \"scheme\",\n      peg$c673 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c674 = function() { return 'SCHEME'; },\n      peg$c675 = \"sequence\",\n      peg$c676 = peg$literalExpectation(\"SEQUENCE\", true),\n      peg$c677 = function() { return 'SEQUENCE'; },\n      peg$c678 = \"tablespace\",\n      peg$c679 = peg$literalExpectation(\"TABLESPACE\", true),\n      peg$c680 = function() { return 'TABLESPACE'; },\n      peg$c681 = function() { return 'COLLATE'; },\n      peg$c682 = \"left\",\n      peg$c683 = peg$literalExpectation(\"LEFT\", true),\n      peg$c684 = \"right\",\n      peg$c685 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c686 = \"full\",\n      peg$c687 = peg$literalExpectation(\"FULL\", true),\n      peg$c688 = \"inner\",\n      peg$c689 = peg$literalExpectation(\"INNER\", true),\n      peg$c690 = \"join\",\n      peg$c691 = peg$literalExpectation(\"JOIN\", true),\n      peg$c692 = \"outer\",\n      peg$c693 = peg$literalExpectation(\"OUTER\", true),\n      peg$c694 = \"union\",\n      peg$c695 = peg$literalExpectation(\"UNION\", true),\n      peg$c696 = \"values\",\n      peg$c697 = peg$literalExpectation(\"VALUES\", true),\n      peg$c698 = \"using\",\n      peg$c699 = peg$literalExpectation(\"USING\", true),\n      peg$c700 = \"where\",\n      peg$c701 = peg$literalExpectation(\"WHERE\", true),\n      peg$c702 = \"group\",\n      peg$c703 = peg$literalExpectation(\"GROUP\", true),\n      peg$c704 = \"by\",\n      peg$c705 = peg$literalExpectation(\"BY\", true),\n      peg$c706 = \"order\",\n      peg$c707 = peg$literalExpectation(\"ORDER\", true),\n      peg$c708 = \"having\",\n      peg$c709 = peg$literalExpectation(\"HAVING\", true),\n      peg$c710 = \"limit\",\n      peg$c711 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c712 = \"offset\",\n      peg$c713 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c714 = function() { return 'OFFSET' },\n      peg$c715 = \"asc\",\n      peg$c716 = peg$literalExpectation(\"ASC\", true),\n      peg$c717 = function() { return 'ASC'; },\n      peg$c718 = \"desc\",\n      peg$c719 = peg$literalExpectation(\"DESC\", true),\n      peg$c720 = function() { return 'DESC'; },\n      peg$c721 = \"all\",\n      peg$c722 = peg$literalExpectation(\"ALL\", true),\n      peg$c723 = function() { return 'ALL'; },\n      peg$c724 = \"distinct\",\n      peg$c725 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c726 = function() { return 'DISTINCT';},\n      peg$c727 = \"between\",\n      peg$c728 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c729 = function() { return 'BETWEEN'; },\n      peg$c730 = function() { return 'IN'; },\n      peg$c731 = \"is\",\n      peg$c732 = peg$literalExpectation(\"IS\", true),\n      peg$c733 = function() { return 'IS'; },\n      peg$c734 = \"like\",\n      peg$c735 = peg$literalExpectation(\"LIKE\", true),\n      peg$c736 = function() { return 'LIKE'; },\n      peg$c737 = \"ilike\",\n      peg$c738 = peg$literalExpectation(\"ILIKE\", true),\n      peg$c739 = function() { return 'ILIKE'; },\n      peg$c740 = \"exists\",\n      peg$c741 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c742 = function() { /* => 'EXISTS' */ return 'EXISTS'; },\n      peg$c743 = function() { return 'NOT'; },\n      peg$c744 = \"and\",\n      peg$c745 = peg$literalExpectation(\"AND\", true),\n      peg$c746 = function() { return 'AND'; },\n      peg$c747 = \"or\",\n      peg$c748 = peg$literalExpectation(\"OR\", true),\n      peg$c749 = function() { return 'OR'; },\n      peg$c750 = \"array\",\n      peg$c751 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c752 = function() { return 'ARRAY'; },\n      peg$c753 = \"array_agg\",\n      peg$c754 = peg$literalExpectation(\"ARRAY_AGG\", true),\n      peg$c755 = function() { return 'ARRAY_AGG'; },\n      peg$c756 = \"count\",\n      peg$c757 = peg$literalExpectation(\"COUNT\", true),\n      peg$c758 = function() { return 'COUNT'; },\n      peg$c759 = \"max\",\n      peg$c760 = peg$literalExpectation(\"MAX\", true),\n      peg$c761 = function() { return 'MAX'; },\n      peg$c762 = \"min\",\n      peg$c763 = peg$literalExpectation(\"MIN\", true),\n      peg$c764 = function() { return 'MIN'; },\n      peg$c765 = \"sum\",\n      peg$c766 = peg$literalExpectation(\"SUM\", true),\n      peg$c767 = function() { return 'SUM'; },\n      peg$c768 = \"avg\",\n      peg$c769 = peg$literalExpectation(\"AVG\", true),\n      peg$c770 = function() { return 'AVG'; },\n      peg$c771 = \"extract\",\n      peg$c772 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c773 = function() { return 'EXTRACT'; },\n      peg$c774 = \"call\",\n      peg$c775 = peg$literalExpectation(\"CALL\", true),\n      peg$c776 = function() { return 'CALL'; },\n      peg$c777 = \"case\",\n      peg$c778 = peg$literalExpectation(\"CASE\", true),\n      peg$c779 = \"when\",\n      peg$c780 = peg$literalExpectation(\"WHEN\", true),\n      peg$c781 = \"then\",\n      peg$c782 = peg$literalExpectation(\"THEN\", true),\n      peg$c783 = \"else\",\n      peg$c784 = peg$literalExpectation(\"ELSE\", true),\n      peg$c785 = \"end\",\n      peg$c786 = peg$literalExpectation(\"END\", true),\n      peg$c787 = \"cast\",\n      peg$c788 = peg$literalExpectation(\"CAST\", true),\n      peg$c789 = \"bool\",\n      peg$c790 = peg$literalExpectation(\"BOOL\", true),\n      peg$c791 = function() { return 'BOOL'; },\n      peg$c792 = \"boolean\",\n      peg$c793 = peg$literalExpectation(\"BOOLEAN\", true),\n      peg$c794 = function() { return 'BOOLEAN'; },\n      peg$c795 = \"char\",\n      peg$c796 = peg$literalExpectation(\"CHAR\", true),\n      peg$c797 = function() { return 'CHAR'; },\n      peg$c798 = \"varchar\",\n      peg$c799 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c800 = function() { return 'VARCHAR';},\n      peg$c801 = \"numeric\",\n      peg$c802 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c803 = function() { return 'NUMERIC'; },\n      peg$c804 = \"decimal\",\n      peg$c805 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c806 = function() { return 'DECIMAL'; },\n      peg$c807 = \"signed\",\n      peg$c808 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c809 = function() { return 'SIGNED'; },\n      peg$c810 = \"unsigned\",\n      peg$c811 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c812 = function() { return 'UNSIGNED'; },\n      peg$c813 = \"int\",\n      peg$c814 = peg$literalExpectation(\"INT\", true),\n      peg$c815 = function() { return 'INT'; },\n      peg$c816 = \"zerofill\",\n      peg$c817 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c818 = function() { return 'ZEROFILL'; },\n      peg$c819 = \"integer\",\n      peg$c820 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c821 = function() { return 'INTEGER'; },\n      peg$c822 = \"json\",\n      peg$c823 = peg$literalExpectation(\"JSON\", true),\n      peg$c824 = function() { return 'JSON'; },\n      peg$c825 = \"jsonb\",\n      peg$c826 = peg$literalExpectation(\"JSONB\", true),\n      peg$c827 = function() { return 'JSONB'; },\n      peg$c828 = \"geometry\",\n      peg$c829 = peg$literalExpectation(\"GEOMETRY\", true),\n      peg$c830 = function() { return 'GEOMETRY'; },\n      peg$c831 = \"smallint\",\n      peg$c832 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c833 = function() { return 'SMALLINT'; },\n      peg$c834 = \"tinyint\",\n      peg$c835 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c836 = function() { return 'TINYINT'; },\n      peg$c837 = \"tinytext\",\n      peg$c838 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c839 = function() { return 'TINYTEXT'; },\n      peg$c840 = \"text\",\n      peg$c841 = peg$literalExpectation(\"TEXT\", true),\n      peg$c842 = function() { return 'TEXT'; },\n      peg$c843 = \"mediumtext\",\n      peg$c844 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c845 = function() { return 'MEDIUMTEXT'; },\n      peg$c846 = \"longtext\",\n      peg$c847 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c848 = function() { return 'LONGTEXT'; },\n      peg$c849 = \"bigint\",\n      peg$c850 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c851 = function() { return 'BIGINT'; },\n      peg$c852 = \"float\",\n      peg$c853 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c854 = function() { return 'FLOAT'; },\n      peg$c855 = \"double\",\n      peg$c856 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c857 = function() { return 'DOUBLE'; },\n      peg$c858 = \"date\",\n      peg$c859 = peg$literalExpectation(\"DATE\", true),\n      peg$c860 = function() { return 'DATE'; },\n      peg$c861 = \"datetime\",\n      peg$c862 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c863 = function() { return 'DATETIME'; },\n      peg$c864 = \"rows\",\n      peg$c865 = peg$literalExpectation(\"ROWS\", true),\n      peg$c866 = function() { return 'ROWS'; },\n      peg$c867 = \"time\",\n      peg$c868 = peg$literalExpectation(\"TIME\", true),\n      peg$c869 = function() { return 'TIME'; },\n      peg$c870 = \"timestamp\",\n      peg$c871 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c872 = function() { return 'TIMESTAMP'; },\n      peg$c873 = \"truncate\",\n      peg$c874 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c875 = function() { return 'TRUNCATE'; },\n      peg$c876 = \"user\",\n      peg$c877 = peg$literalExpectation(\"USER\", true),\n      peg$c878 = function() { return 'USER'; },\n      peg$c879 = \"uuid\",\n      peg$c880 = peg$literalExpectation(\"UUID\", true),\n      peg$c881 = function() { return 'UUID'; },\n      peg$c882 = \"current_date\",\n      peg$c883 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c884 = function() { return 'CURRENT_DATE'; },\n      peg$c885 = \"adddate\",\n      peg$c886 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c887 = function() { return 'ADDDATE'; },\n      peg$c888 = \"interval\",\n      peg$c889 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c890 = function() { return 'INTERVAL'; },\n      peg$c891 = function() { return 'YEAR'; },\n      peg$c892 = function() { return 'MONTH'; },\n      peg$c893 = function() { return 'DAY'; },\n      peg$c894 = function() { return 'HOUR'; },\n      peg$c895 = function() { return 'MINUTE'; },\n      peg$c896 = function() { return 'SECOND'; },\n      peg$c897 = \"current_time\",\n      peg$c898 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c899 = function() { return 'CURRENT_TIME'; },\n      peg$c900 = \"current_timestamp\",\n      peg$c901 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c902 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c903 = \"current_user\",\n      peg$c904 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c905 = function() { return 'CURRENT_USER'; },\n      peg$c906 = \"session_user\",\n      peg$c907 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c908 = function() { return 'SESSION_USER'; },\n      peg$c909 = \"system_user\",\n      peg$c910 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c911 = function() { return 'SYSTEM_USER'; },\n      peg$c912 = \"global\",\n      peg$c913 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c914 = function() { return 'GLOBAL'; },\n      peg$c915 = \"session\",\n      peg$c916 = peg$literalExpectation(\"SESSION\", true),\n      peg$c917 = function() { return 'SESSION'; },\n      peg$c918 = \"local\",\n      peg$c919 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c920 = function() { return 'LOCAL'; },\n      peg$c921 = \"persist\",\n      peg$c922 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c923 = function() { return 'PERSIST'; },\n      peg$c924 = \"persist_only\",\n      peg$c925 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c926 = function() { return 'PERSIST_ONLY'; },\n      peg$c927 = \"@\",\n      peg$c928 = peg$literalExpectation(\"@\", false),\n      peg$c929 = \"@@\",\n      peg$c930 = peg$literalExpectation(\"@@\", false),\n      peg$c931 = \"return\",\n      peg$c932 = peg$literalExpectation(\"return\", true),\n      peg$c933 = \":=\",\n      peg$c934 = peg$literalExpectation(\":=\", false),\n      peg$c935 = \"::\",\n      peg$c936 = peg$literalExpectation(\"::\", false),\n      peg$c937 = \"dual\",\n      peg$c938 = peg$literalExpectation(\"DUAL\", true),\n      peg$c939 = \"add\",\n      peg$c940 = peg$literalExpectation(\"ADD\", true),\n      peg$c941 = function() { return 'ADD'; },\n      peg$c942 = \"column\",\n      peg$c943 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c944 = function() { return 'COLUMN'; },\n      peg$c945 = \"index\",\n      peg$c946 = peg$literalExpectation(\"INDEX\", true),\n      peg$c947 = function() { return 'INDEX'; },\n      peg$c948 = function() { return 'KEY'; },\n      peg$c949 = \"fulltext\",\n      peg$c950 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c951 = function() { return 'FULLTEXT'; },\n      peg$c952 = \"spatial\",\n      peg$c953 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c954 = function() { return 'SPATIAL'; },\n      peg$c955 = function() { return 'UNIQUE'; },\n      peg$c956 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c957 = \"comment\",\n      peg$c958 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c959 = function() { return 'COMMENT'; },\n      peg$c960 = \"constraint\",\n      peg$c961 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c962 = function() { return 'CONSTRAINT'; },\n      peg$c963 = \"concurrently\",\n      peg$c964 = peg$literalExpectation(\"CONCURRENTLY\", true),\n      peg$c965 = function() { return 'CONCURRENTLY'; },\n      peg$c966 = \"references\",\n      peg$c967 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c968 = function() { return 'REFERENCES'; },\n      peg$c969 = \"sql_calc_found_rows\",\n      peg$c970 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c971 = \"sql_cache\",\n      peg$c972 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c973 = \"sql_no_cache\",\n      peg$c974 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c975 = \"sql_small_result\",\n      peg$c976 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c977 = \"sql_big_result\",\n      peg$c978 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c979 = \"sql_buffer_result\",\n      peg$c980 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c981 = \",\",\n      peg$c982 = peg$literalExpectation(\",\", false),\n      peg$c983 = \"[\",\n      peg$c984 = peg$literalExpectation(\"[\", false),\n      peg$c985 = \"]\",\n      peg$c986 = peg$literalExpectation(\"]\", false),\n      peg$c987 = \";\",\n      peg$c988 = peg$literalExpectation(\";\", false),\n      peg$c989 = \"->\",\n      peg$c990 = peg$literalExpectation(\"->\", false),\n      peg$c991 = \"->>\",\n      peg$c992 = peg$literalExpectation(\"->>\", false),\n      peg$c993 = \"#>\",\n      peg$c994 = peg$literalExpectation(\"#>\", false),\n      peg$c995 = \"#>>\",\n      peg$c996 = peg$literalExpectation(\"#>>\", false),\n      peg$c997 = \"||\",\n      peg$c998 = peg$literalExpectation(\"||\", false),\n      peg$c999 = \"&&\",\n      peg$c1000 = peg$literalExpectation(\"&&\", false),\n      peg$c1001 = \"/*\",\n      peg$c1002 = peg$literalExpectation(\"/*\", false),\n      peg$c1003 = \"*/\",\n      peg$c1004 = peg$literalExpectation(\"*/\", false),\n      peg$c1005 = \"--\",\n      peg$c1006 = peg$literalExpectation(\"--\", false),\n      peg$c1007 = \"#\",\n      peg$c1008 = peg$literalExpectation(\"#\", false),\n      peg$c1009 = function(k, s, c) {\n          // => { type: 'comment'; keyword: 'comment'; symbol: '='; value: literal_string; }\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c1010 = peg$anyExpectation(),\n      peg$c1011 = /^[ \\t\\n\\r]/,\n      peg$c1012 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c1013 = function() { varList = []; return true; },\n      peg$c1014 = function(s) {\n            // => { type: 'proc'; stmt: assign_stmt | return_stmt; vars: any }\n            return { type: 'proc', stmt: s, vars: varList };\n          },\n      peg$c1015 = function(va, s, e) {\n          // => { type: 'assign'; left: var_decl | without_prefix_var_decl; symbol: ':=' | '='; right: proc_expr; }\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c1016 = function(e) {\n          // => { type: 'return'; expr: proc_expr; }\n            return { type: 'return', expr: e };\n          },\n      peg$c1017 = function(lt, op, rt, expr) {\n          // => { type: 'join'; ltable: var_decl; rtable: var_decl; op: join_op; expr: on_clause; }\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1018 = function(e) {\n          // => proc_additive_expr & { parentheses: true; }\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1019 = function(dt, tail) {\n          // => string\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1020 = function(name, l) {\n          // => { type: 'function'; name: string; args: null | { type: expr_list; value: proc_primary_list; }}\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1021 = function(name) {\n          // => IGNORE\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1022 = function(head, tail) {\n          // => proc_primary[]\n            return createList(head, tail);\n          },\n      peg$c1023 = function(l) {\n          // => { type: 'array'; value: proc_primary_list }\n          return { type: 'array', value: l };\n        },\n      peg$c1024 = function(p, d) {\n          // => without_prefix_var_decl & { type: 'var'; prefix: string; };\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1025 = function(name, m) {\n          // => { type: 'var'; prefix: string; name: ident_name; members: mem_chain; }\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1026 = function(l) {\n          // => ident_name[];\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1027 = function(t) { /* => data_type */ return { dataType: t }},\n      peg$c1028 = function(t, l) {\n          // => data_type\n          return { dataType: t, length: parseInt(l.join(''), 10) };\n        },\n      peg$c1029 = function(t) { /* =>  data_type */ return { dataType: t }; },\n      peg$c1030 = function(t) { /* =>  data_type */  return { dataType: t }; },\n      peg$c1031 = function(un, ze) {\n          // => any[];\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1032 = function(t, l, r, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s }; },\n      peg$c1033 = function(t, l, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), suffix: s }; },\n      peg$c1034 = function(t, s) { /* =>  data_type */ return { dataType: t, suffix: s }; },\n      peg$c1035 = function(t, l) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c1036 = function(t) {/* =>  data_type */  return { dataType: t }; },\n      peg$c1037 = function(t) { /* =>  data_type */ return { dataType: `${t}[]` }},\n      peg$c1038 = function(t) { /* =>  data_type */ return { dataType: t }},\n      peg$c1039 = function(t) {/* =>  data_type */  return { dataType: t }},\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecmd_stmt();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_table_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_trigger();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_extension_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_index_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecreate_sequence();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecreate_db_stmt();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecrud_stmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_UNION();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseKW_ALL();\n            if (s7 === peg$FAILED) {\n              s7 = null;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseselect_stmt();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_UNION();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseKW_ALL();\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseselect_stmt();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c2(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_extension_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c3) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_IF_NOT_EXISTS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseliteral_string();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_WITH();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parseident_name();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parseliteral_string();\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$currPos;\n                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c7) {\n                              s14 = input.substr(peg$currPos, 7);\n                              peg$currPos += 7;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parse__();\n                              if (s15 !== peg$FAILED) {\n                                s16 = peg$parseident_name();\n                                if (s16 === peg$FAILED) {\n                                  s16 = peg$parseliteral_string();\n                                }\n                                if (s16 !== peg$FAILED) {\n                                  s14 = [s14, s15, s16];\n                                  s13 = s14;\n                                } else {\n                                  peg$currPos = s13;\n                                  s13 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s13;\n                                s13 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s13;\n                              s13 = peg$FAILED;\n                            }\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$currPos;\n                                s16 = peg$parseKW_FROM();\n                                if (s16 !== peg$FAILED) {\n                                  s17 = peg$parse__();\n                                  if (s17 !== peg$FAILED) {\n                                    s18 = peg$parseident_name();\n                                    if (s18 === peg$FAILED) {\n                                      s18 = peg$parseliteral_string();\n                                    }\n                                    if (s18 !== peg$FAILED) {\n                                      s16 = [s16, s17, s18];\n                                      s15 = s16;\n                                    } else {\n                                      peg$currPos = s15;\n                                      s15 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c9(s1, s3, s5, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c10(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_IF_NOT_EXISTS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c11(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_IF_NOT_EXISTS();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c12(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_IF_NOT_EXISTS();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c13(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_TEMP();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SEQUENCE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_IF_NOT_EXISTS();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseKW_AS();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsealias_ident();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsecreate_sequence_definition_list();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c14(s1, s3, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_increment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c15) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c17(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_minval() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c18) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c21) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c18) {\n            s3 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c23();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_maxval() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c21) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c24) {\n            s3 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_start() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c27) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_WITH();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c29(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_cache() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c30) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_cycle() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c21) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c32) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c34(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_owned() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c35) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c37) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c39();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c35) {\n        s1 = input.substr(peg$currPos, 5);\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BY();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c40(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence_definition() {\n    var s0;\n\n    s0 = peg$parsesequence_definition_increment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesequence_definition_minval();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesequence_definition_maxval();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesequence_definition_start();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsesequence_definition_cache();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsesequence_definition_cycle();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsesequence_definition_owned();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence_definition_list() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_sequence_definition();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_sequence_definition();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_sequence_definition();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c41(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONCURRENTLY();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_ON();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseindex_type();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseLPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsecolumn_order_list();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseRPAREN();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$currPos;\n                                                    s26 = peg$parseKW_TABLESPACE();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseident_name();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s26 = [s26, s27, s28];\n                                                          s25 = s26;\n                                                        } else {\n                                                          peg$currPos = s25;\n                                                          s25 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s25;\n                                                        s25 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s25;\n                                                      s25 = peg$FAILED;\n                                                    }\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parsewhere_clause();\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c42(s1, s3, s5, s7, s9, s11, s13, s15, s19, s23, s25, s27);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c43(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecollate_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {\n                      s10 = input.substr(peg$currPos, 5);\n                      peg$currPos += 5;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c46) {\n                          s12 = input.substr(peg$currPos, 5);\n                          peg$currPos += 5;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c47); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c48) {\n                            s12 = input.substr(peg$currPos, 4);\n                            peg$currPos += 4;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c49); }\n                          }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c50(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c51(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c52(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_constraint();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c54) {\n                  s7 = input.substr(peg$currPos, 14);\n                  peg$currPos += 14;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c55); }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c56) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c57); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$currPos;\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c58) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c59); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c60) {\n                            s12 = input.substr(peg$currPos, 3);\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c61); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s10 = [s10, s11, s12];\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsekeyword_comment();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsecollate_expr();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsecolumn_format();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsestorage();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsereference_definition();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c62(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_constraint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedefault_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c63(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_not_null();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_null();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c64(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c65(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c66) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c67); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c68) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c69); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c70) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c71); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c72) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c73); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c74(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c76); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c77) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c78); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c79) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c80); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c81(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c83(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c84(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c85(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c86(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c87(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c89(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_RENAME_TABLE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_ALGORITHM();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_LOCK();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c90(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c91(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c92(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c93(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c94) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c95); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c72) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c73); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c96) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c97); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c98) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c99); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c100) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c101); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c102(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c72) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c73); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c37) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c38); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c105) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c106); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c107) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c109(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c110(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c111(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c112(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c113) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c114); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c115(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c116(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c117) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c118); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c119(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c120) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c121); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c122) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c123); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c124) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c125); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c126(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c127) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c129) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsereference_option();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c131(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c132) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c133); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c134) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c135); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c136) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c137); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c138) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c139); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c140) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c141); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c142(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_trigger() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c143) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c144); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c145) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c146); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c147) {\n                        s9 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c148); }\n                      }\n                      if (s9 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c149) {\n                          s9 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n                        }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetrigger_event_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c151) {\n                              s13 = input.substr(peg$currPos, 2);\n                              peg$currPos += 2;\n                            } else {\n                              s13 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c152); }\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_name();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$currPos;\n                                    s18 = peg$parseKW_FROM();\n                                    if (s18 !== peg$FAILED) {\n                                      s19 = peg$parse__();\n                                      if (s19 !== peg$FAILED) {\n                                        s20 = peg$parsetable_name();\n                                        if (s20 !== peg$FAILED) {\n                                          s18 = [s18, s19, s20];\n                                          s17 = s18;\n                                        } else {\n                                          peg$currPos = s17;\n                                          s17 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s17;\n                                        s17 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s17;\n                                      s17 = peg$FAILED;\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsetrigger_deferrable();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsetrigger_for_row();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsetrigger_when();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c153) {\n                                                      s25 = input.substr(peg$currPos, 7);\n                                                      peg$currPos += 7;\n                                                    } else {\n                                                      s25 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c154); }\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c155) {\n                                                          s27 = input.substr(peg$currPos, 9);\n                                                          peg$currPos += 9;\n                                                        } else {\n                                                          s27 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c156); }\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            s29 = peg$parseproc_func_call();\n                                                            if (s29 !== peg$FAILED) {\n                                                              peg$savedPos = s0;\n                                                              s1 = peg$c157(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s29);\n                                                              s0 = s1;\n                                                            } else {\n                                                              peg$currPos = s0;\n                                                              s0 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DELETE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TRUNCATE();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c158(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UPDATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c159) {\n            s4 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c160); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref_list();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c161(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrigger_event();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetrigger_event();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetrigger_event();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c162(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_deferrable() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c163) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c165) {\n          s4 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c166); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 19).toLowerCase() === peg$c167) {\n          s3 = input.substr(peg$currPos, 19);\n          peg$currPos += 19;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c168); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 18).toLowerCase() === peg$c169) {\n            s3 = input.substr(peg$currPos, 18);\n            peg$currPos += 18;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c170); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c171(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_for_row() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c172) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c173); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c174) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c175); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c176) {\n              s5 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c177); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c178) {\n                s5 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c179); }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c180(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_when() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c181(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c182(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c183) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c184); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c187();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c188) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c189); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c190) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c191); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c192(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c54) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c55); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c193) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c194); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c195) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c196); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c197) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c198); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c199) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c200); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c201) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c202); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c203(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c204) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c205); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c206(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c207) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c208); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c209;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c211) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c213) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c37) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c209;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c215(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c216) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c217); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c218(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c219(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c220(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c221(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_mode() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c222) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c223); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c224) {\n          s3 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c225); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c226) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c227); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c228) {\n              s3 = input.substr(peg$currPos, 13);\n              peg$currPos += 13;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c229); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 22).toLowerCase() === peg$c230) {\n                s3 = input.substr(peg$currPos, 22);\n                peg$currPos += 22;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c231); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 19).toLowerCase() === peg$c232) {\n                  s3 = input.substr(peg$currPos, 19);\n                  peg$currPos += 19;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c233); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c107) {\n                    s3 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c234) {\n                      s3 = input.substr(peg$currPos, 16);\n                      peg$currPos += 16;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                    }\n                    if (s3 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c236) {\n                        s3 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c238) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c239); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c240(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselock_mode();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c241) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c243(s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c244(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c245;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c246); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c247;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c248); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c249(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c250(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c251(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseunion_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c252(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c253(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_DISTINCT();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsewhere_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsegroup_by_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsehaving_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parseorder_by_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parselimit_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c254(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22);\n                                                s0 = s1;\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c255(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c256(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c257(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c258(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseKW_DOUBLE_COLON();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c259(s1, s2, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c260(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseexpr();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c261(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c262(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c263(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c264(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c265(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c266(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c267) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c268); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c269) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c270); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c271) {\n              s3 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c272); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c273) {\n                s3 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c274); }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c275(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c276(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c277(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c278(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseident();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c279(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c280) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c281); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c282) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c283); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c284(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c285) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c286); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c287) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c288); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c289(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsekeyword_comment();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c290(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c291(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c292(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c293(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c294(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c295(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c296();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsetable_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c297(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLPAREN();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseunion_stmt();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsealias_clause();\n                    if (s7 === peg$FAILED) {\n                      s7 = null;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c298(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c299();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c300();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c301();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          s2 = peg$parseKW_INNER();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseKW_JOIN();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c302();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c303(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c304(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c305(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c306(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c307(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c307(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c308(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c309(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c307(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewindow_specification();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c310(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewindow_frame_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c311(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification_frameless() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c312(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROWS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewindow_frame_following();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsewindow_frame_preceding();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c313(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewindow_frame_preceding();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AND();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsewindow_frame_following();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c314(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c315) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c316); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c317(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c318) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c319); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c320(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c321) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c322); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c176) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c177); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c323();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c326(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c327(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c328(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c329(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c330(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ALL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_OFFSET();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c331(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhere_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c332(s3, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c333(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c334(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c335;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c336); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c337(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c335;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c336); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c338(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturning_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURNING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecolumn_ref_list();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c339(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c340(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c341(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsereturning_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c342(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_value_clause();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c343(s1, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c344();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c345();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c346(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c347(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c348(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c349(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c350(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INTERVAL();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c351(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsecase_when_then();\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsecase_when_then();\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecase_else();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_END();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_CASE();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c352(s3, s5, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c353(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c354(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseunary_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselect_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c355(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c356(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_or_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_or_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_or_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_or_expr() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = peg$currPos;\n              s6 = peg$c358(s1, s3, s5);\n              if (s6) {\n                s6 = peg$FAILED;\n              } else {\n                s6 = void 0;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c359(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c361;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c362); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c335;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c336); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c363(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c364(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c365(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c366(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsejsonb_op_right();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c367(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c368) {\n      s0 = peg$c368;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c369); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c370;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c371); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c372) {\n          s0 = peg$c372;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c373); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c374) {\n            s0 = peg$c374;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c375); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c376;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c377); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c335;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c336); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c378) {\n                  s0 = peg$c378;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c379); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c380(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_IS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_DISTINCT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseKW_FROM();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetable_name();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c381(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseKW_IS();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_NOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseadditive_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c382(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c383(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c384(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 === peg$FAILED) {\n          s4 = peg$parseKW_ILIKE();\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c385(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_ILIKE();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c386(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c387(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c388(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c389(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejsonb_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c390) {\n      s1 = peg$c390;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c391); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c392) {\n        s1 = peg$c392;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c393); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPERATOR_CONCATENATION();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseDOUBLE_WELL_ARROW();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWELL_ARROW();\n            if (s1 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 63) {\n                s1 = peg$c394;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c395); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c396) {\n                  s1 = peg$c396;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c397); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c398) {\n                    s1 = peg$c398;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c399); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c400) {\n                      s1 = peg$c400;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c401); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_list_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c402(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c403;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c404); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c405;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c406); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c408;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c410;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c411); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c412;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c413); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewindow_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsefunc_call();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecase_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseinterval_expr();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsecolumn_ref();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseparam();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      s1 = peg$parseLPAREN();\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parse__();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parseexpr();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parse__();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parseRPAREN();\n                              if (s5 !== peg$FAILED) {\n                                s6 = [];\n                                s7 = peg$currPos;\n                                s8 = peg$parse___();\n                                if (s8 !== peg$FAILED) {\n                                  s9 = peg$parseKW_AND();\n                                  if (s9 === peg$FAILED) {\n                                    s9 = peg$parseKW_OR();\n                                  }\n                                  if (s9 !== peg$FAILED) {\n                                    s10 = peg$parse__();\n                                    if (s10 !== peg$FAILED) {\n                                      s11 = peg$parseor_expr();\n                                      if (s11 !== peg$FAILED) {\n                                        s8 = [s8, s9, s10, s11];\n                                        s7 = s8;\n                                      } else {\n                                        peg$currPos = s7;\n                                        s7 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                                while (s7 !== peg$FAILED) {\n                                  s6.push(s7);\n                                  s7 = peg$currPos;\n                                  s8 = peg$parse___();\n                                  if (s8 !== peg$FAILED) {\n                                    s9 = peg$parseKW_AND();\n                                    if (s9 === peg$FAILED) {\n                                      s9 = peg$parseKW_OR();\n                                    }\n                                    if (s9 !== peg$FAILED) {\n                                      s10 = peg$parse__();\n                                      if (s10 !== peg$FAILED) {\n                                        s11 = peg$parseor_expr();\n                                        if (s11 !== peg$FAILED) {\n                                          s8 = [s8, s9, s10, s11];\n                                          s7 = s8;\n                                        } else {\n                                          peg$currPos = s7;\n                                          s7 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s7;\n                                        s7 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                }\n                                if (s6 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c414(s3, s6);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseLPAREN();\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse__();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseexpr_list();\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse__();\n                              if (s4 !== peg$FAILED) {\n                                s5 = peg$parseRPAREN();\n                                if (s5 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c415(s3);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsevar_decl();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            s1 = peg$parse__();\n                            if (s1 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 36) {\n                                s2 = peg$c416;\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c417); }\n                              }\n                              if (s2 !== peg$FAILED) {\n                                s3 = peg$parseliteral_numeric();\n                                if (s3 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c418(s2, s3);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSTAR();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c419(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseDOUBLE_ARROW();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseSINGLE_ARROW();\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseliteral_string();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseliteral_numeric();\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c420(s1, s3, s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseDOT();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsecolumn();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c421(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsecolumn();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c422(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c253(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c423(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c425(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c426(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c427(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c428;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c429); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c430.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c431); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c430.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c431); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c428;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c429); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c432(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c209;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c433.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c434); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c433.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c209;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c210); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c432(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c435;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c437.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c438); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c437.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c438); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c435;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c436); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c432(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c423(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c439(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c440(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c441(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c442.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c443); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c444.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c445); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c446.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c447); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c448;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c449); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c450(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c451) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c452); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c453(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c451) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c452); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c454(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_array_agg();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_func() {\n    var s0;\n\n    s0 = peg$parsewindow_fun_rank();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_fun_laglead();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsewindow_fun_firstlast();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_rank() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WIN_FNS_RANK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseover_partition();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c455(s1, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_laglead() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LAG_LEAD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseconsider_nulls_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c456(s1, s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_firstlast() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FIRST_LAST_VALUE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseconsider_nulls_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c457(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FIRST_LAST_VALUE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c458) {\n      s0 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c460) {\n        s0 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c461); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WIN_FNS_RANK() {\n    var s0;\n\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c462) {\n      s0 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c463); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c464) {\n        s0 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c465); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c466) {\n          s0 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c467); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LAG_LEAD() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c468) {\n      s0 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c469); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c470) {\n        s0 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c471); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c472) {\n          s0 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c473); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconsider_nulls_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c476) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c477); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c45); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c478(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c479(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c480(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedistinct_args() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DISTINCT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c481(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c482(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c483(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedistinct_args();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_array_agg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY_AGG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedistinct_args();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseorder_by_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c484(s1, s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c408;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c485();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c486(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsescalar_func();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr_list();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c487(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseextract_func();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c488) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c490) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c491); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c492) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c493); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c494) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c495); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c496) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c497); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c498) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c499); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c500) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c501); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c502) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c503); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c504) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c506) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c507); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c508) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c509); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c510) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c511); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c512) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c513); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c514) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c515); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c516) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c517); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c518) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c519); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c520) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c521); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c522) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c523); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c524) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c525); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c526) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c527); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c528) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c529); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c530();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c531(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_CURRENT_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_USER();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_SESSION_USER();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseKW_SYSTEM_USER();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseaggr_func();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsewindow_func();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsefunc_call();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parsecase_expr();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseinterval_expr();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parsecolumn_ref();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseparam();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseKW_DOUBLE_COLON();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c532(s1, s2, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsedata_type();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseRPAREN();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c533(s5, s9);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseRPAREN();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseRPAREN();\n                                        if (s17 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c534(s5, s13);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseKW_DECIMAL();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseLPAREN();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseint();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parse__();\n                                    if (s14 !== peg$FAILED) {\n                                      s15 = peg$parseCOMMA();\n                                      if (s15 !== peg$FAILED) {\n                                        s16 = peg$parse__();\n                                        if (s16 !== peg$FAILED) {\n                                          s17 = peg$parseint();\n                                          if (s17 !== peg$FAILED) {\n                                            s18 = peg$parse__();\n                                            if (s18 !== peg$FAILED) {\n                                              s19 = peg$parseRPAREN();\n                                              if (s19 !== peg$FAILED) {\n                                                s20 = peg$parse__();\n                                                if (s20 !== peg$FAILED) {\n                                                  s21 = peg$parseRPAREN();\n                                                  if (s21 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c535(s5, s13, s17);\n                                                    s0 = s1;\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_CAST();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLPAREN();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseexpr();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseKW_AS();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parsesignedness();\n                            if (s9 !== peg$FAILED) {\n                              s10 = peg$parse__();\n                              if (s10 !== peg$FAILED) {\n                                s11 = peg$parseKW_INTEGER();\n                                if (s11 === peg$FAILED) {\n                                  s11 = null;\n                                }\n                                if (s11 !== peg$FAILED) {\n                                  s12 = peg$parse__();\n                                  if (s12 !== peg$FAILED) {\n                                    s13 = peg$parseRPAREN();\n                                    if (s13 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c536(s5, s9, s11);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseliteral_array();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_array() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRBRAKE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c537(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c538(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c539();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c540();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c541();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c209;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c209;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c210); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c543(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s2 = peg$c428;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c429); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_quote_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_quote_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c428;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c429); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseDOT();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = void 0;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c544(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c209;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c210); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c209;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c210); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c545(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CURRENT_TIMESTAMP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = peg$currPos;\n                s6 = peg$c546(s1, s3, s5);\n                if (s6) {\n                  s6 = peg$FAILED;\n                } else {\n                  s6 = void 0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse__();\n                  if (s7 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 27).toLowerCase() === peg$c547) {\n                      s8 = input.substr(peg$currPos, 27);\n                      peg$currPos += 27;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c548); }\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c549(s1, s3, s5, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c550.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c551); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c552.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c553); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c554) {\n      s1 = peg$c554;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c555); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c556();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c557) {\n        s1 = peg$c557;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c558); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c559();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c560) {\n          s1 = peg$c560;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c561); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c562();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c563) {\n            s1 = peg$c563;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c564); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c565();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c566) {\n              s1 = peg$c566;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c567); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c568();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c569) {\n                s1 = peg$c569;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c570); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c571();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c572) {\n                  s1 = peg$c572;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c573); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c574();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c575) {\n                    s1 = peg$c575;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c576); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c577();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c578) {\n                      s1 = peg$c578;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c580();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c581) {\n                        s1 = peg$c581;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c582); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c583(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c584;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c585); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c562();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c586.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c587); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c588(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c589(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c590(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c591(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c592(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c405;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c406); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c403;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c404); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c593(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c405;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c406); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c403;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c404); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c594(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c595;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c596); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c597(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c598(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c599(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c600.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c602.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c604.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c605); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c606.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c607); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c608(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c72) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c73); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c613) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c614); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c619) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c620); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c624) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c626) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c628) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c630) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c632) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c634) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c635); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c636();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c637) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c638); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c639();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c640) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c642) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c643); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c644) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c646) {\n      s1 = peg$c646;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c648) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURNING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c650) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c652();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c653) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c654); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c655) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c656); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c657) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c658); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c659();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c660) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c662) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c664) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c665); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c666) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c667); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c668();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c669) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c670); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c671();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c672) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c673); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c674();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SEQUENCE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c675) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c676); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c677();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLESPACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c678) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c679); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c680();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c190) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c191); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c681();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c151) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c152); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c682) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c683); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c684) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c685); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c688) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c689); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c690) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c691); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c692) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c693); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c694) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c695); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c696) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c697); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c698) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c699); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c700) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c701); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c280) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c702) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c703); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c704) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c705); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c706) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c707); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c708) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c709); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c710) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c711); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c712) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c713); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c714();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c715) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c716); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c717();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c718) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c719); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c720();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c721) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c722); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c723();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c724) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c725); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c726();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c727) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c728); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c729();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c222) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c223); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c730();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c733();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c734) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c735); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c736();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ILIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c163) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c743();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c744) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c745); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c746();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c747) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c748); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c749();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c750) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c751); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c752();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY_AGG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c753) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c754); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c755();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c756) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c757); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c758();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c759) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c760); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c761();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c762) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c763); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c764();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c765) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c766); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c767();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c768) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c769); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c770();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c771) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c772); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c773();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c774) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c775); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c776();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c777) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c778); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c781) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c782); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c783) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c784); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c787) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c788); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c789) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c790); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c791();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOLEAN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c792) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c793); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c794();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c795) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c796); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c797();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c798) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c799); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c800();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c801) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c802); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c803();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c804) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c805); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c806();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c807) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c808); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c809();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c810) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c811); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c812();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c813) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c814); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c815();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c816) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c817); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c818();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c819) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c820); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c821();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c822) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c823); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c824();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSONB() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c825) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c826); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c827();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOMETRY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c828) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c829); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c830();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c831) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c832); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c833();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c834) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c835); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c836();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c837) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c838); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c839();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c840) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c841); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c842();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c843) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c844); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c845();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c846) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c847); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c848();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c849) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c850); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c851();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c852) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c853); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c854();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c855) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c856); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c857();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c858) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c859); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c860();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c861) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c862); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c863();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c864) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c865); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c866();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c867) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c868); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c869();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c870) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c871); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c872();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c873) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c874); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c875();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c876) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c877); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c878();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UUID() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c879) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c880); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c881();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c882) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c883); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c884();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c885) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c886); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c887();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c888) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c889); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c890();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c528) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c891();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c514) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c515); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c892();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c490) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c491); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c893();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c894();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c512) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c513); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c895();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c896();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c897) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c898); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c899();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c900) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c901); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c902();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c903) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c904); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c905();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c906) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c907); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c908();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c909) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c910); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c911();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c912) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c913); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c914();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c915) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c916); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c917();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c918) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c919); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c920();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c921) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c922); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c923();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c924) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c925); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c926();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c927;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c928); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c929) {\n      s0 = peg$c929;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c930); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c416;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c931) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c932); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c933) {\n      s0 = peg$c933;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c934); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE_COLON() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c935) {\n      s0 = peg$c935;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c936); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c335;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c336); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c937) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c938); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c939) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c940); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c941();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c942) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c943); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c944();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c945) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c946); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c947();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c60) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c61); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c952) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c953); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c954();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c56) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c57); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c955();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c195) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c196); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c956();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c957) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c958); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c959();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c960) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c961); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c962();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONCURRENTLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c963) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c964); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c965();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c966) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c967); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c968();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c969) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c970); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c971) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c972); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c973) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c974); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c975) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c976); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c977) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c978); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c979) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c980); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c595;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c596); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c981;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c982); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c408;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c245;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c246); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c247;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c248); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c983;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c984); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c985;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c986); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c987;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c988); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSINGLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c989) {\n      s0 = peg$c989;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c990); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c991) {\n      s0 = peg$c991;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c992); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c993) {\n      s0 = peg$c993;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c994); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_WELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c995) {\n      s0 = peg$c995;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c996); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c997) {\n      s0 = peg$c997;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c998); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c999) {\n      s0 = peg$c999;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1000); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1001) {\n      s1 = peg$c1001;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1002); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c1003) {\n        s5 = peg$c1003;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1004); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1003) {\n          s5 = peg$c1003;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1004); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c1003) {\n          s3 = peg$c1003;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1004); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1005) {\n      s1 = peg$c1005;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1006); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1007;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1008); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1009(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1010); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c1011.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1012); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c586.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c587); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c586.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c587); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1010); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c1013();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1014(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1015(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1016(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1017(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1018(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1019(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1020(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1021(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1022(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1023(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1024(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1025(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c595;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c596); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c595;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c596); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1026(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsecharacter_string_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsenumeric_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedatetime_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsejson_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsegeometry_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsetext_type();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseuuid_type();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseboolean_type();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseboolean_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BOOL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOLEAN();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1027(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CHAR();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_VARCHAR();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c600.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c601); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c600.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c601); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1028(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CHAR();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1029(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_VARCHAR();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1030(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1031(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DECIMAL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_INT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_SMALLINT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_TINYINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_BIGINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_FLOAT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_DOUBLE();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c600.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c601); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c600.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c601); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = [];\n                    if (peg$c600.test(input.charAt(peg$currPos))) {\n                      s11 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s11 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        if (peg$c600.test(input.charAt(peg$currPos))) {\n                          s11 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c601); }\n                        }\n                      }\n                    } else {\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s8 = [s8, s9, s10];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumeric_type_suffix();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1032(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_NUMERIC();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DECIMAL();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INTEGER();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_SMALLINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_TINYINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_BIGINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_FLOAT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_DOUBLE();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c600.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c601); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c600.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c601); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsenumeric_type_suffix();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1033(s1, s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NUMERIC();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DECIMAL();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_INTEGER();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_SMALLINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_TINYINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_BIGINT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_FLOAT();\n                      if (s1 === peg$FAILED) {\n                        s1 = peg$parseKW_DOUBLE();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumeric_type_suffix();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1034(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c600.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c601); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c600.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c601); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1035(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1030(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_JSON();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_JSONB();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1030(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsegeometry_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GEOMETRY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1036(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TINYTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_MEDIUMTEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_LONGTEXT();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseRBRAKE();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1037(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TINYTEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_MEDIUMTEXT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_LONGTEXT();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1038(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuuid_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UUID();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1039(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'INTERVAL': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LIKE': true,\n      'LIMIT': true,\n\n      'NOT': true,\n      'NULL': true,\n      'NULLS': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'STATUS': true, // reserved (MySQL)\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    function commonStrToLiteral(strOrLiteral) {\n      return typeof strOrLiteral === 'string' ? { type: 'same', value: strOrLiteral } : strOrLiteral\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (fnName) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { target, expr: expression, symbol, as: alias } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  if (!args) return name\n  const { parentheses, over } = expr\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  const overStr = overToSQL(over)\n  return [parentheses ? `(${str})` : str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\nimport { exprToSQL } from './expr'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr } = tableInfo\n  const database = identifierToSql(db)\n  const tableName = table ? identifierToSql(table) : exprToSQL(expr)\n  const str = database ? `${database}.${tableName}` : tableName\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, table, parentheses, property,\n  } = expr\n  let str = column === '*' ? '*' : identifierToSql(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale } = definition || {}\n  let result = dataType\n  if (length) {\n    result += `(${[length, scale].filter(hasVal).join(', ')})`\n  }\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (column.as.match(/^[a-z_][0-9a-z_]*$/i)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, value } = opt\n  result.push(type.toUpperCase())\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'time':\n    case 'date':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnDefinitionToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  const {\n    action, create_definitions: createDefinition, if_not_exists: ifNotExists,keyword, resource, symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    default:\n      break\n  }\n  const alterArray = [toUpper(action), toUpper(keyword), toUpper(ifNotExists), name, dataType.filter(hasVal).join(' ')]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${name}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  extract     : extractFunToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(expr) {\n  const str = `${expr.operator} ${exprToSQL(expr.expr)}`\n  return expr.parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) str = `DISTINCT ${str}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  return [`${fnName}(${str})`, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns,\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL, toUpper } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value, keyword } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    if (keyword) setItem[2] = `${toUpper(keyword)}(${val})`\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = ['INSERT', toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  commonCmdToSQL,\n  declareToSQL,\n  renameToSQL,\n  useToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { createToSQL } from './create'\nimport { alterToSQL } from './alter'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  commonCmdToSQL,\n  declareToSQL,\n  useToSQL,\n  renameToSQL,\n  callToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}